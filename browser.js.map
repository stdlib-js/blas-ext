{"version":3,"file":"browser.js","sources":["../node_modules/@stdlib/utils-define-property/lib/define_property.js","../node_modules/@stdlib/utils-define-property/lib/builtin.js","../node_modules/@stdlib/utils-define-property/lib/polyfill.js","../node_modules/@stdlib/utils-define-property/lib/index.js","../node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js","../node_modules/@stdlib/utils-define-read-only-property/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js","../node_modules/@stdlib/blas-ext-base-dapx/lib/dapx.js","../node_modules/@stdlib/math-base-special-abs/lib/main.js","../node_modules/@stdlib/blas-ext-base-dapxsumkbn/lib/dapxsumkbn.js","../node_modules/@stdlib/blas-ext-base-dapxsumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dapxsum/lib/dapxsum.js","../node_modules/@stdlib/blas-ext-base-dapxsumkbn2/lib/dapxsumkbn2.js","../node_modules/@stdlib/blas-ext-base-dapxsumors/lib/dapxsumors.js","../node_modules/@stdlib/blas-ext-base-dapx/lib/main.js","../node_modules/@stdlib/blas-ext-base-dapx/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dapxsumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-dapxsum/lib/main.js","../node_modules/@stdlib/blas-ext-base-dapxsum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dapxsumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-dapxsumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dapxsumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-dapxsumors/lib/ndarray.js","../node_modules/@stdlib/math-base-special-floor/lib/main.js","../node_modules/@stdlib/blas-ext-base-dapxsumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dapxsumpw/lib/dapxsumpw.js","../node_modules/@stdlib/blas-ext-base-dasumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dasumpw/lib/dasumpw.js","../node_modules/@stdlib/blas-ext-base-dcusumkbn/lib/dcusumkbn.js","../node_modules/@stdlib/blas-ext-base-dcusumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dcusum/lib/dcusum.js","../node_modules/@stdlib/blas-ext-base-dcusumkbn2/lib/dcusumkbn2.js","../node_modules/@stdlib/blas-ext-base-dcusumors/lib/dcusumors.js","../node_modules/@stdlib/blas-ext-base-dcusumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dcusumpw/lib/dcusumpw.js","../node_modules/@stdlib/blas-ext-base-dfill/lib/dfill.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnanasumors/lib/dnanasumors.js","../node_modules/@stdlib/blas-ext-base-dnanasumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnanasum/lib/dnanasum.js","../node_modules/@stdlib/blas-ext-base-dnannsumkbn/lib/dnannsumkbn.js","../node_modules/@stdlib/blas-ext-base-dnannsumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnannsum/lib/dnannsum.js","../node_modules/@stdlib/blas-ext-base-dnannsumkbn2/lib/dnannsumkbn2.js","../node_modules/@stdlib/blas-ext-base-dnannsumors/lib/dnannsumors.js","../node_modules/@stdlib/blas-ext-base-dnannsumpw/lib/sumpw.js","../node_modules/@stdlib/blas-ext-base-dnannsumpw/lib/dnannsumpw.js","../node_modules/@stdlib/blas-ext-base-dnansumkbn/lib/dnansumkbn.js","../node_modules/@stdlib/blas-ext-base-dnansumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnansum/lib/dnansum.js","../node_modules/@stdlib/blas-ext-base-dnansumkbn2/lib/dnansumkbn2.js","../node_modules/@stdlib/blas-ext-base-dnansumors/lib/dnansumors.js","../node_modules/@stdlib/blas-ext-base-dnansumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnansumpw/lib/dnansumpw.js","../node_modules/@stdlib/blas-ext-base-drev/lib/drev.js","../node_modules/@stdlib/blas-ext-base-dsapxsumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsapxsumpw/lib/dsapxsumpw.js","../node_modules/@stdlib/blas-ext-base-dsapxsum/lib/dsapxsum.js","../node_modules/@stdlib/blas-ext-base-dsnannsumors/lib/dsnannsumors.js","../node_modules/@stdlib/math-base-assert-is-nanf/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsnansumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsnansumpw/lib/dsnansumpw.js","../node_modules/@stdlib/blas-ext-base-dsnansum/lib/dsnansum.js","../node_modules/@stdlib/blas-ext-base-dsnansumors/lib/dsnansumors.js","../node_modules/@stdlib/blas-ext-base-dapxsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-dasumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-dcusumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-dcusum/lib/main.js","../node_modules/@stdlib/blas-ext-base-dcusum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dcusumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-dcusumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dcusumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-dcusumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dcusumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-dfill/lib/main.js","../node_modules/@stdlib/blas-ext-base-dfill/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnanasumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnanasum/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnanasum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnannsumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnannsum/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnannsum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnannsumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnannsumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnannsumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnannsumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnannsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnannsumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnansumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnansum/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnansum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnansumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnansumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnansumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-dnansumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dnansumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-drev/lib/main.js","../node_modules/@stdlib/blas-ext-base-drev/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsapxsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsapxsum/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsapxsum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsnannsumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsnannsumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsnansumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsnansum/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsnansum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsnansumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsnansumors/lib/ndarray.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-positive-zero/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsort2hp/lib/dsort2hp.js","../node_modules/@stdlib/blas-ext-base-dsort2hp/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsort2hp/lib/ndarray.js","../node_modules/@stdlib/number-ctor/lib/number.js","../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-negative-zero/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsort2ins/lib/dsort2ins.js","../node_modules/@stdlib/blas-ext-base-dsort2ins/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsort2ins/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsort2sh/lib/dsort2sh.js","../node_modules/@stdlib/blas-ext-base-dsort2sh/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsorthp/lib/dsorthp.js","../node_modules/@stdlib/blas-ext-base-dsortins/lib/dsortins.js","../node_modules/@stdlib/blas-ext-base-dsort2sh/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsorthp/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsorthp/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsortins/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsortins/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsortsh/lib/dsortsh.js","../node_modules/@stdlib/blas-ext-base-dsortsh/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dssumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dssumpw/lib/dssumpw.js","../node_modules/@stdlib/blas-ext-base-dssum/lib/dssum.js","../node_modules/@stdlib/blas-ext-base-dssumors/lib/dssumors.js","../node_modules/@stdlib/blas-ext-base-dsumkbn/lib/dsumkbn.js","../node_modules/@stdlib/blas-ext-base-dsumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsum/lib/dsum.js","../node_modules/@stdlib/blas-ext-base-dsumkbn2/lib/dsumkbn2.js","../node_modules/@stdlib/blas-ext-base-dsumors/lib/dsumors.js","../node_modules/@stdlib/blas-ext-base-dsumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsumpw/lib/dsumpw.js","../node_modules/@stdlib/blas-ext-base-gapx/lib/main.js","../node_modules/@stdlib/blas-ext-base-gapxsumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-gapxsumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gapxsum/lib/main.js","../node_modules/@stdlib/blas-ext-base-gapxsumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-gapxsumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-gapxsumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gapxsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-gasumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gasumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-gcusumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-gcusumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gcusum/lib/main.js","../node_modules/@stdlib/blas-ext-base-gcusumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-gcusumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-gcusumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gcusumpw/lib/main.js","../node_modules/@stdlib/array-base-arraylike2object/lib/getter.js","../node_modules/@stdlib/array-base-arraylike2object/lib/getter.accessor.js","../node_modules/@stdlib/array-base-arraylike2object/lib/setter.js","../node_modules/@stdlib/array-base-arraylike2object/lib/setter.accessor.js","../node_modules/@stdlib/array-base-arraylike2object/lib/main.js","../node_modules/@stdlib/blas-ext-base-gfill/lib/accessors.js","../node_modules/@stdlib/blas-ext-base-gfill/lib/main.js","../node_modules/@stdlib/blas-ext-base-gfill-by/lib/accessors.js","../node_modules/@stdlib/blas-ext-base-gfill-by/lib/main.js","../node_modules/@stdlib/blas-ext-base-gnansumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-gnansumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gnansum/lib/main.js","../node_modules/@stdlib/blas-ext-base-gnansumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-gnansumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-gnansumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gnansumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-grev/lib/accessors.js","../node_modules/@stdlib/blas-ext-base-grev/lib/main.js","../node_modules/@stdlib/blas-ext-base-gsort2hp/lib/main.js","../node_modules/@stdlib/blas-ext-base-gsort2ins/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsortsh/lib/main.js","../node_modules/@stdlib/blas-ext-base-dssumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-dssum/lib/main.js","../node_modules/@stdlib/blas-ext-base-dssum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dssumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-dssumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsum/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-gapx/lib/index.js","../node_modules/@stdlib/blas-ext-base-gapx/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gapxsumkbn/lib/index.js","../node_modules/@stdlib/blas-ext-base-gapxsum/lib/index.js","../node_modules/@stdlib/blas-ext-base-gapxsum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gapxsumkbn2/lib/index.js","../node_modules/@stdlib/blas-ext-base-gapxsumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gapxsumors/lib/index.js","../node_modules/@stdlib/blas-ext-base-gapxsumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gapxsumpw/lib/index.js","../node_modules/@stdlib/blas-ext-base-gasumpw/lib/index.js","../node_modules/@stdlib/blas-ext-base-gcusumkbn/lib/index.js","../node_modules/@stdlib/blas-ext-base-gcusum/lib/index.js","../node_modules/@stdlib/blas-ext-base-gcusum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gcusumkbn2/lib/index.js","../node_modules/@stdlib/blas-ext-base-gcusumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gcusumors/lib/index.js","../node_modules/@stdlib/blas-ext-base-gcusumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gcusumpw/lib/index.js","../node_modules/@stdlib/blas-ext-base-gfill/lib/index.js","../node_modules/@stdlib/blas-ext-base-gfill/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gfill-by/lib/index.js","../node_modules/@stdlib/blas-ext-base-gfill-by/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gnansumkbn/lib/index.js","../node_modules/@stdlib/blas-ext-base-gnansum/lib/index.js","../node_modules/@stdlib/blas-ext-base-gnansum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gnansumkbn2/lib/index.js","../node_modules/@stdlib/blas-ext-base-gnansumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gnansumors/lib/index.js","../node_modules/@stdlib/blas-ext-base-gnansumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gnansumpw/lib/index.js","../node_modules/@stdlib/blas-ext-base-grev/lib/index.js","../node_modules/@stdlib/blas-ext-base-grev/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsort2hp/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsort2hp/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsort2ins/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsort2ins/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsort2sh/lib/main.js","../node_modules/@stdlib/blas-ext-base-gsort2sh/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsorthp/lib/main.js","../node_modules/@stdlib/blas-ext-base-gsortins/lib/main.js","../node_modules/@stdlib/blas-ext-base-gsort2sh/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsorthp/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsorthp/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsortins/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsortins/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsortsh/lib/main.js","../node_modules/@stdlib/blas-ext-base-gsortsh/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-gsumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsum/lib/main.js","../node_modules/@stdlib/blas-ext-base-gsumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-gsumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-gsumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-sapx/lib/sapx.js","../node_modules/@stdlib/blas-ext-base-gsortsh/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsumkbn/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsum/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsumkbn2/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsumors/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsumpw/lib/index.js","../node_modules/@stdlib/blas-ext-base-sapx/lib/main.js","../node_modules/@stdlib/blas-ext-base-sapx/lib/ndarray.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/index.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js","../node_modules/@stdlib/assert-has-symbol-support/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostring.js","../node_modules/@stdlib/assert-has-own-property/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostringtag.js","../node_modules/@stdlib/utils-native-class/lib/polyfill.js","../node_modules/@stdlib/utils-native-class/lib/native_class.js","../node_modules/@stdlib/assert-is-float32array/lib/main.js","../node_modules/@stdlib/assert-has-float32array-support/lib/float32array.js","../node_modules/@stdlib/array-float32/lib/float32array.js","../node_modules/@stdlib/array-float32/lib/index.js","../node_modules/@stdlib/assert-has-float32array-support/lib/main.js","../node_modules/@stdlib/array-float32/lib/polyfill.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/polyfill.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/index.js","../node_modules/@stdlib/blas-ext-base-sapxsumkbn/lib/sapxsumkbn.js","../node_modules/@stdlib/blas-ext-base-sapxsumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sapxsum/lib/sapxsum.js","../node_modules/@stdlib/blas-ext-base-sapxsumkbn2/lib/sapxsumkbn2.js","../node_modules/@stdlib/blas-ext-base-sapxsumors/lib/sapxsumors.js","../node_modules/@stdlib/blas-ext-base-sapxsumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sapxsumpw/lib/sapxsumpw.js","../node_modules/@stdlib/blas-ext-base-sasumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sasumpw/lib/sasumpw.js","../node_modules/@stdlib/blas-ext-base-scusumkbn/lib/scusumkbn.js","../node_modules/@stdlib/blas-ext-base-scusumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-scusum/lib/scusum.js","../node_modules/@stdlib/blas-ext-base-scusumkbn2/lib/scusumkbn2.js","../node_modules/@stdlib/blas-ext-base-scusumors/lib/scusumors.js","../node_modules/@stdlib/blas-ext-base-scusumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-scusumpw/lib/scusumpw.js","../node_modules/@stdlib/blas-ext-base-sdsapxsumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sdsapxsumpw/lib/sdsapxsumpw.js","../node_modules/@stdlib/blas-ext-base-sdsapxsum/lib/sdsapxsum.js","../node_modules/@stdlib/blas-ext-base-sdsnansumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sdsnansumpw/lib/sdsnansumpw.js","../node_modules/@stdlib/blas-ext-base-sdsnansum/lib/sdsnansum.js","../node_modules/@stdlib/blas-ext-base-sdssumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sdssumpw/lib/sdssumpw.js","../node_modules/@stdlib/blas-ext-base-sdssum/lib/sdssum.js","../node_modules/@stdlib/blas-ext-base-sfill/lib/sfill.js","../node_modules/@stdlib/blas-ext-base-snansumkbn/lib/snansumkbn.js","../node_modules/@stdlib/blas-ext-base-snansumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-snansum/lib/snansum.js","../node_modules/@stdlib/blas-ext-base-snansumkbn2/lib/snansumkbn2.js","../node_modules/@stdlib/blas-ext-base-snansumors/lib/snansumors.js","../node_modules/@stdlib/blas-ext-base-snansumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-snansumpw/lib/snansumpw.js","../node_modules/@stdlib/blas-ext-base-srev/lib/srev.js","../node_modules/@stdlib/blas-ext-base-sapxsumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-sapxsum/lib/main.js","../node_modules/@stdlib/blas-ext-base-sapxsum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sapxsumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-sapxsumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sapxsumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-sapxsumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sapxsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-sasumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-scusumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-scusum/lib/main.js","../node_modules/@stdlib/blas-ext-base-scusum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-scusumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-scusumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-scusumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-scusumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-scusumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-sdsapxsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-sdsapxsum/lib/main.js","../node_modules/@stdlib/blas-ext-base-sdsapxsum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sdsnansumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-sdsnansum/lib/main.js","../node_modules/@stdlib/blas-ext-base-sdsnansum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sdssumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-sdssum/lib/main.js","../node_modules/@stdlib/blas-ext-base-sdssum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sfill/lib/main.js","../node_modules/@stdlib/blas-ext-base-sfill/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-snansumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-snansum/lib/main.js","../node_modules/@stdlib/blas-ext-base-snansum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-snansumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-snansumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-snansumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-snansumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-snansumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-srev/lib/main.js","../node_modules/@stdlib/blas-ext-base-srev/lib/ndarray.js","../node_modules/@stdlib/assert-is-uint32array/lib/main.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js","../node_modules/@stdlib/array-uint32/lib/uint32array.js","../node_modules/@stdlib/array-uint32/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/main.js","../node_modules/@stdlib/array-uint32/lib/polyfill.js","../node_modules/@stdlib/constants-float32-pinf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-positive-zerof/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssort2hp/lib/ssort2hp.js","../node_modules/@stdlib/blas-ext-base-ssort2hp/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssort2hp/lib/ndarray.js","../node_modules/@stdlib/constants-float32-ninf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-negative-zerof/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssort2ins/lib/ssort2ins.js","../node_modules/@stdlib/blas-ext-base-ssort2ins/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssort2ins/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssort2sh/lib/ssort2sh.js","../node_modules/@stdlib/blas-ext-base-ssort2sh/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssorthp/lib/ssorthp.js","../node_modules/@stdlib/blas-ext-base-ssortins/lib/ssortins.js","../node_modules/@stdlib/blas-ext-base-ssort2sh/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssorthp/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssorthp/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssortins/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssortins/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssortsh/lib/ssortsh.js","../node_modules/@stdlib/blas-ext-base-ssortsh/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssumkbn/lib/ssumkbn.js","../node_modules/@stdlib/blas-ext-base-ssumkbn/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssum/lib/ssum.js","../node_modules/@stdlib/blas-ext-base-ssumkbn2/lib/ssumkbn2.js","../node_modules/@stdlib/blas-ext-base-ssumors/lib/ssumors.js","../node_modules/@stdlib/blas-ext-base-ssumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssumpw/lib/ssumpw.js","../node_modules/@stdlib/blas-ext-base-ssortsh/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssumkbn/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssum/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssum/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssumkbn2/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssumkbn2/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssumors/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssumors/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base/lib/index.js","../node_modules/@stdlib/blas-ext-base-gnannsumkbn/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @name defineProperty\n* @type {Function}\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nvar defineProperty = Object.defineProperty;\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, no-proto */\n\n'use strict';\n\n// VARIABLES //\n\nvar objectProtoype = Object.prototype;\nvar toStr = objectProtoype.toString;\nvar defineGetter = objectProtoype.__defineGetter__;\nvar defineSetter = objectProtoype.__defineSetter__;\nvar lookupGetter = objectProtoype.__lookupGetter__;\nvar lookupSetter = objectProtoype.__lookupSetter__;\n\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @param {Object} obj - object on which to define the property\n* @param {string} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nfunction defineProperty( obj, prop, descriptor ) {\n\tvar prototype;\n\tvar hasValue;\n\tvar hasGet;\n\tvar hasSet;\n\n\tif ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );\n\t}\n\tif ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {\n\t\tthrow new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + descriptor + '`.' );\n\t}\n\thasValue = ( 'value' in descriptor );\n\tif ( hasValue ) {\n\t\tif (\n\t\t\tlookupGetter.call( obj, prop ) ||\n\t\t\tlookupSetter.call( obj, prop )\n\t\t) {\n\t\t\t// Override `__proto__` to avoid touching inherited accessors:\n\t\t\tprototype = obj.__proto__;\n\t\t\tobj.__proto__ = objectProtoype;\n\n\t\t\t// Delete property as existing getters/setters prevent assigning value to specified property:\n\t\t\tdelete obj[ prop ];\n\t\t\tobj[ prop ] = descriptor.value;\n\n\t\t\t// Restore original prototype:\n\t\t\tobj.__proto__ = prototype;\n\t\t} else {\n\t\t\tobj[ prop ] = descriptor.value;\n\t\t}\n\t}\n\thasGet = ( 'get' in descriptor );\n\thasSet = ( 'set' in descriptor );\n\n\tif ( hasValue && ( hasGet || hasSet ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );\n\t}\n\n\tif ( hasGet && defineGetter ) {\n\t\tdefineGetter.call( obj, prop, descriptor.get );\n\t}\n\tif ( hasSet && defineSetter ) {\n\t\tdefineSetter.call( obj, prop, descriptor.set );\n\t}\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define (or modify) an object property.\n*\n* @module @stdlib/utils-define-property\n*\n* @example\n* import defineProperty from '@stdlib/utils-define-property' ;\n*\n* var obj = {};\n* defineProperty( obj, 'foo', {\n*     'value': 'bar',\n*     'writable': false,\n*     'configurable': false,\n*     'enumerable': false\n* });\n* obj.foo = 'boop'; // => throws\n*/\n\n// MODULES //\n\nimport hasDefinePropertySupport from './has_define_property_support.js' ;\nimport builtin from './builtin.js' ;\nimport polyfill from './polyfill.js' ;\n\n\n// MAIN //\n\nvar defineProperty;\nif ( hasDefinePropertySupport() ) {\n\tdefineProperty = builtin;\n} else {\n\tdefineProperty = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from './define_property.js' ;\n\n\n// MAIN //\n\n/**\n* Tests for `Object.defineProperty` support.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support\n*\n* @example\n* var bool = hasDefinePropertySupport();\n* // returns <boolean>\n*/\nfunction hasDefinePropertySupport() {\n\t// Test basic support...\n\ttry {\n\t\tdefineProperty( {}, 'x', {} );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default hasDefinePropertySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property' ;\n\n\n// MAIN //\n\n/**\n* Defines a read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property' ;\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dapx( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction dapx( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] += alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] += alpha;\n\t\t\tx[ i+1 ] += alpha;\n\t\t\tx[ i+2 ] += alpha;\n\t\t\tx[ i+3 ] += alpha;\n\t\t\tx[ i+4 ] += alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nexport default abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumkbn( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dapxsumkbn( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumkbn( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dapxsumkbn from '@stdlib/blas-ext-base-dapxsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsum( N, alpha, x, stride ) {\n\treturn dapxsumkbn( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumkbn2( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumors( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dapx from './dapx.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dapx, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n* var alpha = 5.0;\n*\n* dapx( 3, alpha, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction dapx( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dapxsumkbn from './dapxsumkbn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dapxsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dapxsum from './dapxsum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dapxsumkbn } from '@stdlib/blas-ext-base-dapxsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsum( N, alpha, x, stride, offset ) {\n\treturn dapxsumkbn( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dapxsumkbn2 from './dapxsumkbn2.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dapxsumkbn2( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumkbn2( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dapxsumors from './dapxsumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dapxsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dapxsumors( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumors( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floor( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floor( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floor( NaN );\n* // returns NaN\n*/\nvar floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dapxsumpw( n, alpha, x, stride, ix ) + dapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dasumpw( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dasumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+stride ] );\n\t\ts2 = abs( x[ ix+(2*stride) ] );\n\t\ts3 = abs( x[ ix+(3*stride) ] );\n\t\ts4 = abs( x[ ix+(4*stride) ] );\n\t\ts5 = abs( x[ ix+(5*stride) ] );\n\t\ts6 = abs( x[ ix+(6*stride) ] );\n\t\ts7 = abs( x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( x[ ix ] );\n\t\t\ts1 += abs( x[ ix+stride ] );\n\t\t\ts2 += abs( x[ ix+(2*stride) ] );\n\t\t\ts3 += abs( x[ ix+(3*stride) ] );\n\t\t\ts4 += abs( x[ ix+(4*stride) ] );\n\t\t\ts5 += abs( x[ ix+(5*stride) ] );\n\t\t\ts6 += abs( x[ ix+(6*stride) ] );\n\t\t\ts7 += abs( x[ ix+(7*stride) ] );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dasumpw( n, x, stride, ix ) + dasumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dasumpw( N, x, 1 );\n* // returns 5.0\n*/\nfunction dasumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumkbn( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumkbn( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = dcusumkbn( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dcusumkbn from '@stdlib/blas-ext-base-dcusumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusum( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusum( N, sum, x, strideX, y, strideY ) {\n\treturn dcusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumkbn2( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumors( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumors( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = dcusumpw( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\ty[ iy ] = sum + s;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tdcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tdcusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cusum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n* var N = x.length;\n*\n* var v = dcusumpw( N, 0.0, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction dcusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\treturn cusum( N, sum, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a double-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* dfill( x.length, 5.0, x, 1 );\n* // x => <Float64Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction dfill( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] = alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] = alpha;\n\t\t\tx[ i+1 ] = alpha;\n\t\t\tx[ i+2 ] = alpha;\n\t\t\tx[ i+3 ] = alpha;\n\t\t\tx[ i+4 ] = alpha;\n\t\t\tx[ i+5 ] = alpha;\n\t\t\tx[ i+6 ] = alpha;\n\t\t\tx[ i+7 ] = alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanasumors( N, x, 1 );\n* // returns 5.0\n*/\nfunction dnanasumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tsum += abs( v );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanasumors( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dnanasumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tsum += abs( v );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dnanasumors from '@stdlib/blas-ext-base-dnanasumors' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanasum( N, x, 1 );\n* // returns 5.0\n*/\nfunction dnanasum( N, x, stride ) {\n\treturn dnanasumors( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + c;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsumkbn( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + c;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dnannsumkbn from '@stdlib/blas-ext-base-dnannsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsum( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsum( N, x, strideX, out, strideOut ) {\n\treturn dnannsumkbn( N, x, strideX, out, strideOut );\n}\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + cs + ccs;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumors( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of a double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - two-element output array whose first element is the accumulated sum and whose second element is the accumulated number of summed values\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var out = new Float64Array( [ 0.0, 0 ] );\n* var v = sumpw( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction sumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar ix;\n\tvar io;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tio = offsetOut;\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] += x[ ix ];\n\t\tout[ io+strideOut ] += 1;\n\t\treturn out;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ io ] += s;\n\t\tout[ io+strideOut ] += n;\n\t\treturn out;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = 0.0;\n\t\ts1 = 0.0;\n\t\ts2 = 0.0;\n\t\ts3 = 0.0;\n\t\ts4 = 0.0;\n\t\ts5 = 0.0;\n\t\ts6 = 0.0;\n\t\ts7 = 0.0;\n\t\tn = 0;\n\n\t\tM = N % 8;\n\t\tfor ( i = 0; i < N-M; i += 8 ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts0 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts1 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts2 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts3 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts4 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts5 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts6 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts7 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ io ] += s;\n\t\tout[ io+strideOut ] += n;\n\t\treturn out;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\tsumpw( n, x, strideX, ix, out, strideOut, offsetOut );\n\tsumpw( N-n, x, strideX, ix+(n*strideX), out, strideOut, offsetOut );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumpw from './sumpw.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumpw( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumpw( N, x, strideX, out, strideOut ) {\n\tvar ix;\n\tvar io;\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tout[ io ] = 0.0;\n\tout[ io+strideOut ] = 0;\n\tsumpw( N, x, strideX, ix, out, strideOut, io );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnansumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dnansumkbn from '@stdlib/blas-ext-base-dnansumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansum( N, x, stride ) {\n\treturn dnansumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dnansumpw( n, x, stride, ix ) + dnansumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a double-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* drev( x.length, x, 1 );\n* // x => <Float64Array>[ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction drev( N, x, stride ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( ix = 0; ix < m; ix++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tiy -= 1;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( ix = m; ix < n; ix += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsapxsumpw( n, alpha, x, stride, ix ) + dsapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dsapxsumpw from '@stdlib/blas-ext-base-dsapxsumpw' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dsapxsum( N, alpha, x, stride ) {\n\treturn dsapxsumpw( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dsnannsumors( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dsnannsumors( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnanf( NaN );\n* // returns true\n*\n* @example\n* var bool = isnanf( 7.0 );\n* // returns false\n*/\nfunction isnanf( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnanf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsnansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsnansumpw( n, x, stride, ix ) + dsnansumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using pairwise summation with extended accumulation, and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dsnansumpw from '@stdlib/blas-ext-base-dsnansumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansum( N, x, stride ) {\n\treturn dsnansumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsnansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dapxsumpw from './dapxsumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dasumpw from './dasumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dcusumkbn from './dcusumkbn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dcusumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dcusum from './dcusum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dcusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dcusumkbn } from '@stdlib/blas-ext-base-dcusumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = dcusum( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn dcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default dcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dcusumkbn2 from './dcusumkbn2.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dcusumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = dcusumkbn2( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dcusumors from './dcusumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dcusumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = dcusumors( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dcusumpw from './dcusumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dcusumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dfill from './dfill.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a double-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* dfill( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction dfill( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnanasumors from './dnanasumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnanasumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanasumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnanasum from './dnanasum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnanasum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnanasumors } from '@stdlib/blas-ext-base-dnanasumors' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanasum( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction dnanasum( N, x, stride, offset ) {\n\treturn dnanasumors( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dnanasum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnannsumkbn from './dnannsumkbn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnannsum from './dnannsum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnannsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnannsumkbn } from '@stdlib/blas-ext-base-dnannsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsum( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsum( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\treturn dnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut );\n}\n\n\n// EXPORTS //\n\nexport default dnannsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnannsumkbn2 from './dnannsumkbn2.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsumkbn2( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ccs;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + cs + ccs;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnannsumors from './dnannsumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsumors( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnannsumpw from './dnannsumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnannsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumpw from './sumpw.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dnannsumpw( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tout[ offsetOut ] = 0.0;\n\tout[ offsetOut+strideOut ] = 0;\n\tsumpw( N, x, strideX, offsetX, out, strideOut, offsetOut );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnansumkbn from './dnansumkbn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnansumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnansum from './dnansum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnansumkbn } from '@stdlib/blas-ext-base-dnansumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansum( N, x, stride, offset ) {\n\treturn dnansumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnansumkbn2 from './dnansumkbn2.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnansumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnansumors from './dnansumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnansumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dnansumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dnansumpw from './dnansumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport drev from './drev.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( drev, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a double-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* drev( 3, x, 1, x.length-3 );\n* // x => <Float64Array>[ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction drev( N, x, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += stride;\n\t\t\t\tiy -= stride;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default drev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsapxsumpw from './dsapxsumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsapxsum from './dsapxsum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsapxsumpw } from '@stdlib/blas-ext-base-dsapxsumpw' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dsapxsum( N, alpha, x, stride, offset ) {\n\treturn dsapxsumpw( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsnannsumors from './dsnannsumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsnannsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dsnannsumors( N, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dsnannsumors( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dsnannsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsnansumpw from './dsnansumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsnansum from './dsnansum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsnansumpw } from '@stdlib/blas-ext-base-dsnansumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsnansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansum( N, x, stride, offset ) {\n\treturn dsnansumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsnansumors from './dsnansumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsnansumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants-float64-pinf' ;\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf' ;\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZero( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZero( -0.0 );\n* // returns false\n*/\nfunction isPositiveZero( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsort2hp from './dsort2hp.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsort2hp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* import FLOAT64_NINF from '@stdlib/constants-float64-ninf' ;\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor' ;\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nexport default FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf' ;\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZero( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZero( 0.0 );\n* // returns false\n*/\nfunction isNegativeZero( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsort2ins from './dsort2ins.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float64Array} `x`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* dsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float64Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction dsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsorthp( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsort2sh from './dsort2sh.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsorthp from './dsorthp.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsorthp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsorthp( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsortins from './dsortins.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortsh( x.length, 1.0, x, 1 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a double-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float64Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} input array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* dsortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float64Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction dsortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dssumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dssumpw( n, x, stride, ix ) + dssumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation and returning an extended precision result.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dssumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dssumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dssumpw from '@stdlib/blas-ext-base-dssumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dssum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dssum( N, x, stride ) {\n\treturn dssumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation with extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dssumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dssumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[i] + x[i+1] + x[i+2] + x[i+3] + x[i+4] + x[i+5];\n\t\t}\n\t\treturn sum;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dsumkbn from '@stdlib/blas-ext-base-dsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsum( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsum( N, x, stride ) {\n\treturn dsumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[i] + x[i+1] + x[i+2] + x[i+3] + x[i+4] + x[i+5];\n\t\t}\n\t\treturn sum;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsumpw( n, x, stride, ix ) + dsumpw( N-n, x, stride, ix+(n*stride) );\n}\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction gapx( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] += alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] += alpha;\n\t\t\tx[ i+1 ] += alpha;\n\t\t\tx[ i+2 ] += alpha;\n\t\t\tx[ i+3 ] += alpha;\n\t\t\tx[ i+4 ] += alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumkbn( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gapxsumkbn from '@stdlib/blas-ext-base-gapxsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsum( N, alpha, x, stride ) {\n\treturn gapxsumkbn( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default gapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumkbn2( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumors( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gapxsumpw( n, alpha, x, stride, ix ) + gapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gasumpw( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction gasumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+stride ] );\n\t\ts2 = abs( x[ ix+(2*stride) ] );\n\t\ts3 = abs( x[ ix+(3*stride) ] );\n\t\ts4 = abs( x[ ix+(4*stride) ] );\n\t\ts5 = abs( x[ ix+(5*stride) ] );\n\t\ts6 = abs( x[ ix+(6*stride) ] );\n\t\ts7 = abs( x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += abs( x[ ix ] );\n\t\t\ts1 += abs( x[ ix+stride ] );\n\t\t\ts2 += abs( x[ ix+(2*stride) ] );\n\t\t\ts3 += abs( x[ ix+(3*stride) ] );\n\t\t\ts4 += abs( x[ ix+(4*stride) ] );\n\t\t\ts5 += abs( x[ ix+(5*stride) ] );\n\t\t\ts6 += abs( x[ ix+(6*stride) ] );\n\t\t\ts7 += abs( x[ ix+(7*stride) ] );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gasumpw( n, x, stride, ix ) + gasumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gasumpw( x.length, x, 1 );\n* // returns 5.0\n*/\nfunction gasumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += abs( x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default gasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = s + v;\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc += (s-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + s;\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = s + c;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gcusumkbn from '@stdlib/blas-ext-base-gcusumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusum( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusum( N, sum, x, strideX, y, strideY ) {\n\treturn gcusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\n\nexport default gcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumors( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumpw( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\ty[ iy ] = sum + s;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tgcusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tgcusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cusum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* var v = gcusumpw( x.length, 0.0, x, 1, y, 1 );\n* // returns [ 1.0, -1.0, 1.0 ]\n*/\nfunction gcusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\treturn cusum( N, sum, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default gcusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array element.\n*\n* @private\n* @param {Collection} x - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element\n*/\nfunction getter( x, idx ) {\n\treturn x[ idx ];\n}\n\n\n// EXPORTS //\n\nexport default getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array element using an accessor method.\n*\n* @private\n* @param {Collection} x - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element\n*/\nfunction getter( x, idx ) {\n\treturn x.get( idx );\n}\n\n\n// EXPORTS //\n\nexport default getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets an array element.\n*\n* @private\n* @param {Collection} x - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*/\nfunction setter( x, idx, value ) {\n\tx[ idx ] = value;\n}\n\n\n// EXPORTS //\n\nexport default setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets an array element using an accessor method.\n*\n* @private\n* @param {Collection} x - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*/\nfunction setter( x, idx, value ) {\n\tx.set( value, idx );\n}\n\n\n// EXPORTS //\n\nexport default setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getIndexed from './getter.js' ;\nimport getAccessor from './getter.accessor.js' ;\nimport setIndexed from './setter.js' ;\nimport setAccessor from './setter.accessor.js' ;\n\n\n// MAIN //\n\n/**\n* Converts an array-like to an object likely to have the same \"shape\".\n*\n* ## Notes\n*\n* -   This function is intended as a potential performance optimization. In V8, for example, even if two objects share common properties, if those properties were added in different orders or if one object has additional properties not shared by the other object, then those objects will have different \"hidden\" classes. If a function is provided many objects having different \"shapes\", some JavaScript VMs (e.g., V8) will consider the function \"megamorphic\" and fail to perform various runtime optimizations. Accordingly, the intent of this function is to standardize the \"shape\" of the object holding array meta data to ensure that internal functions operating on arrays are provided consistent argument \"shapes\".\n*\n* -   The returned object has the following properties:\n*\n*     -   **data**: data buffer.\n*     -   **accessors**: `boolean` indicating whether the data buffer uses accessors for getting and setting elements.\n*     -   **getter**: accessor for retrieving a data buffer element.\n*     -   **setter**: accessor for setting a data buffer element.\n*\n* @param {Collection} x - array-like object\n* @returns {Object} object containing array meta data\n*\n* @example\n* var obj = arraylike2object( [ 1, 2, 3, 4 ] );\n* // returns {...}\n*/\nfunction arraylike2object( x ) {\n\tvar bool = Boolean( x.get && x.set ); // Note: intentional weak check, as we don't explicitly check for functions for (perhaps marginally) better performance.\n\treturn {\n\t\t'data': x,\n\t\t'accessors': bool,\n\t\t'getter': ( bool ) ? getAccessor : getIndexed,\n\t\t'setter': ( bool ) ? setAccessor : setIndexed\n\t};\n}\n\n\n// EXPORTS //\n\nexport default arraylike2object;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Function} x.set - setter\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64' ;\n* import Complex64 from '@stdlib/complex-float32' ;\n* import reinterpret64 from '@stdlib/strided-base-reinterpret-complex64' ;\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'setter': setter\n* };\n*\n* var alpha = new Complex64( 5.0, 5.0 );\n*\n* gfill( data.length, alpha, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride, offset ) {\n\tvar xbuf;\n\tvar set;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tset = x.setter;\n\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, alpha );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object' ;\nimport accessors from './accessors.js' ;\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\tif ( stride < 0 ) {\n\t\t\tix = (1-N) * stride;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\taccessors( N, alpha, o, stride, ix );\n\t\treturn o.data;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] = alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] = alpha;\n\t\t\tx[ i+1 ] = alpha;\n\t\t\tx[ i+2 ] = alpha;\n\t\t\tx[ i+3 ] = alpha;\n\t\t\tx[ i+4 ] = alpha;\n\t\t\tx[ i+5 ] = alpha;\n\t\t\tx[ i+6 ] = alpha;\n\t\t\tx[ i+7 ] = alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Function} x.set - setter\n* @param {Function} x.get - getter\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @param {Callback} clbk - callback\n* @param {*} thisArg - execution context\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64' ;\n* import Complex64 from '@stdlib/complex-float32' ;\n* import reinterpret64 from '@stdlib/strided-base-reinterpret-complex64' ;\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'setter': setter,\n*     'getter': getter\n* };\n*\n* function clbk() {\n*     return new Complex64( 5.0, 5.0 );\n* }\n*\n* gfillBy( data.length, x, 1, 0, clbk, void 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, stride, offset, clbk, thisArg ) {\n\tvar xbuf;\n\tvar set;\n\tvar get;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.getter;\n\tset = x.setter;\n\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, clbk.call( thisArg, get( xbuf, ix ), i, ix, x ) );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object' ;\nimport accessors from './accessors.js' ;\n\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* gfillBy( x.length, x, 1, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, stride, clbk, thisArg ) {\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\taccessors( N, o, stride, ix, clbk, thisArg );\n\t\treturn o.data;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gnansumkbn from '@stdlib/blas-ext-base-gnansumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansum( N, x, stride ) {\n\treturn gnansumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default gnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumors( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn s;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\ts += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnan( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gnansumpw( n, x, stride, ix ) + gnansumpw( N-n, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction gnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default gnansumpw;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Function} x.set - setter\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Object} input array object\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64' ;\n* import Complex64 from '@stdlib/complex-float32' ;\n* import reinterpret64 from '@stdlib/strided-base-reinterpret-complex64' ;\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* function getter( data, idx ) {\n*     return data.get( idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'setter': setter,\n*     'getter': getter\n* };\n*\n* grev( data.length, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ -1.0, -3.0, 4.0, 0.0, 3.0, -5.0, -2.0, 1.0 ]\n*/\nfunction grev( N, x, stride, offset ) {\n\tvar xbuf;\n\tvar set;\n\tvar get;\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tset = x.setter;\n\tget = x.getter;\n\n\tn = floor( N/2 );\n\tix = offset;\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = get( xbuf, ix );\n\t\tset( xbuf, ix, get( xbuf, iy ) );\n\t\tset( xbuf, iy, tmp );\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\nimport arraylike2object from '@stdlib/array-base-arraylike2object' ;\nimport accessors from './accessors.js' ;\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction grev( N, x, stride ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar o;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\tif ( stride < 0 ) {\n\t\t\tix = (1-N) * stride;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\taccessors( N, o, stride, ix );\n\t\treturn o.data;\n\t}\n\tn = floor( N/2 );\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( ix = 0; ix < m; ix++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tiy -= 1;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( ix = m; ix < n; ix += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsortsh from './dsortsh.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dssumpw from './dssumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dssum from './dssum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dssumpw } from '@stdlib/blas-ext-base-dssumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dssum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssum( N, x, stride, offset ) {\n\treturn dssumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dssumors from './dssumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dssumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation with extended accumulation and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dssumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dssumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsumkbn from './dsumkbn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsum from './dsum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsumkbn } from '@stdlib/blas-ext-base-dsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsum( N, x, stride, offset ) {\n\treturn dsumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default dsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsumkbn2 from './dsumkbn2.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default dsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsumors from './dsumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport dsumpw from './dsumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( dsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each element in a strided array.\n*\n* @module @stdlib/blas-ext-base-gapx\n*\n* @example\n* import gapx from '@stdlib/blas-ext-base-gapx' ;\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx( x.length, 5.0, x, 1 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*\n* @example\n* import gapx from '@stdlib/blas-ext-base-gapx' ;\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gapx.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n* var alpha = 5.0;\n*\n* gapx( 3, alpha, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction gapx( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas-ext-base-gapxsumkbn\n*\n* @example\n* import gapxsumkbn from '@stdlib/blas-ext-base-gapxsumkbn' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gapxsumkbn from '@stdlib/blas-ext-base-gapxsumkbn' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum.\n*\n* @module @stdlib/blas-ext-base-gapxsum\n*\n* @example\n* import gapxsum from '@stdlib/blas-ext-base-gapxsum' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gapxsum from '@stdlib/blas-ext-base-gapxsum' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsum.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gapxsumkbn } from '@stdlib/blas-ext-base-gapxsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsum( N, alpha, x, stride, offset ) {\n\treturn gapxsumkbn( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default gapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas-ext-base-gapxsumkbn2\n*\n* @example\n* import gapxsumkbn2 from '@stdlib/blas-ext-base-gapxsumkbn2' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gapxsumkbn2 from '@stdlib/blas-ext-base-gapxsumkbn2' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn2.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumkbn2( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumkbn2( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = alpha + x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using ordinary recursive summation.\n*\n* @module @stdlib/blas-ext-base-gapxsumors\n*\n* @example\n* import gapxsumors from '@stdlib/blas-ext-base-gapxsumors' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gapxsumors from '@stdlib/blas-ext-base-gapxsumors' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumors.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumors( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumors( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += alpha + x[ ix ];\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default gapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gapxsumpw\n*\n* @example\n* import gapxsumpw from '@stdlib/blas-ext-base-gapxsumpw' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gapxsumpw from '@stdlib/blas-ext-base-gapxsumpw' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumpw.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of absolute values (L1 norm) of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gasumpw\n*\n* @example\n* import gasumpw from '@stdlib/blas-ext-base-gasumpw' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gasumpw( x.length, x, 1 );\n* // returns 5.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gasumpw from '@stdlib/blas-ext-base-gasumpw' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gasumpw.ndarray( N, x, 2, 1 );\n* // returns 9.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas-ext-base-gcusumkbn\n*\n* @example\n* import gcusumkbn from '@stdlib/blas-ext-base-gcusumkbn' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gcusumkbn from '@stdlib/blas-ext-base-gcusumkbn' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements.\n*\n* @module @stdlib/blas-ext-base-gcusum\n*\n* @example\n* import gcusum from '@stdlib/blas-ext-base-gcusum' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusum( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gcusum from '@stdlib/blas-ext-base-gcusum' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusum.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gcusumkbn } from '@stdlib/blas-ext-base-gcusumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusum( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn gcusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default gcusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas-ext-base-gcusumkbn2\n*\n* @example\n* import gcusumkbn2 from '@stdlib/blas-ext-base-gcusumkbn2' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumkbn2( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gcusumkbn2 from '@stdlib/blas-ext-base-gcusumkbn2' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn2.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumkbn2( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\n\t\ty[ iy ] = sum + cs + ccs;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas-ext-base-gcusumors\n*\n* @example\n* import gcusumors from '@stdlib/blas-ext-base-gcusumors' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumors( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gcusumors from '@stdlib/blas-ext-base-gcusumors' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumors.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumors( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction gcusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gcusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gcusumpw\n*\n* @example\n* import gcusumpw from '@stdlib/blas-ext-base-gcusumpw' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n*\n* gcusumpw( x.length, 0.0, x, 1, y, 1 );\n* // y => [ 1.0, -1.0, 1.0 ]\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gcusumpw from '@stdlib/blas-ext-base-gcusumpw' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* gcusumpw.ndarray( N, 0.0, x, 2, 1, y, 1, 0 );\n* // y => [ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with a specified scalar constant.\n*\n* @module @stdlib/blas-ext-base-gfill\n*\n* @example\n* import gfill from '@stdlib/blas-ext-base-gfill' ;\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* import gfill from '@stdlib/blas-ext-base-gfill' ;\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object' ;\nimport accessors from './accessors.js' ;\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gfill( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\taccessors( N, alpha, o, stride, offset );\n\t\treturn o.data;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array according to a provided callback function.\n*\n* @module @stdlib/blas-ext-base-gfill-by\n*\n* @example\n* import gfillBy from '@stdlib/blas-ext-base-gfill-by' ;\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfillBy( x.length, x, 1, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* import gfillBy from '@stdlib/blas-ext-base-gfill-by' ;\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfillBy.ndarray( x.length, x, 1, 0, fill );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object' ;\nimport accessors from './accessors.js' ;\n\n\n// MAIN //\n\n/**\n* Fills a strided array according to a provided callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* function fill() {\n*     return 5.0;\n* }\n*\n* gfillBy( 3, x, 1, x.length-3, fill );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfillBy( N, x, stride, offset, clbk, thisArg ) {\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\taccessors( N, o, stride, offset, clbk, thisArg );\n\t\treturn o.data;\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gfillBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas-ext-base-gnansumkbn\n*\n* @example\n* import gnansumkbn from '@stdlib/blas-ext-base-gnansumkbn' ;\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gnansumkbn from '@stdlib/blas-ext-base-gnansumkbn' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values.\n*\n* @module @stdlib/blas-ext-base-gnansum\n*\n* @example\n* import gnansum from '@stdlib/blas-ext-base-gnansum' ;\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansum( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gnansum from '@stdlib/blas-ext-base-gnansum' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansum.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gnansumkbn } from '@stdlib/blas-ext-base-gnansumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansum( N, x, stride, offset ) {\n\treturn gnansumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default gnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas-ext-base-gnansumkbn2\n*\n* @example\n* import gnansumkbn2 from '@stdlib/blas-ext-base-gnansumkbn2' ;\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumkbn2( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gnansumkbn2 from '@stdlib/blas-ext-base-gnansumkbn2' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn2.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gnansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @module @stdlib/blas-ext-base-gnansumors\n*\n* @example\n* import gnansumors from '@stdlib/blas-ext-base-gnansumors' ;\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumors( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gnansumors from '@stdlib/blas-ext-base-gnansumors' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumors.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gnansumors( N, x, stride, offset ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn s;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\ts += x[ ix ];\n\t\t}\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gnansumpw\n*\n* @example\n* import gnansumpw from '@stdlib/blas-ext-base-gnansumpw' ;\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = gnansumpw( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gnansumpw from '@stdlib/blas-ext-base-gnansumpw' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = gnansumpw.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Reverse a strided array in-place.\n*\n* @module @stdlib/blas-ext-base-grev\n*\n* @example\n* import grev from '@stdlib/blas-ext-base-grev' ;\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*\n* @example\n* import grev from '@stdlib/blas-ext-base-grev' ;\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* grev( x.length, x, 1, 0 );\n* // x => [ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\nimport arraylike2object from '@stdlib/array-base-arraylike2object' ;\nimport accessors from './accessors.js' ;\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* grev( 3, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction grev( N, x, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar o;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessors ) {\n\t\taccessors( N, o, stride, offset );\n\t\treturn o.data;\n\t}\n\tn = floor( N/2 );\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += stride;\n\t\t\t\tiy -= stride;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default grev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* @module @stdlib/blas-ext-base-gsort2hp\n*\n* @example\n* import gsort2hp from '@stdlib/blas-ext-base-gsort2hp' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2hp from '@stdlib/blas-ext-base-gsort2hp' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnan( v1 ) || ( v1 === tx && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @module @stdlib/blas-ext-base-gsort2ins\n*\n* @example\n* import gsort2ins from '@stdlib/blas-ext-base-gsort2ins' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2ins from '@stdlib/blas-ext-base-gsort2ins' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform Shellsort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform Shellsort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two double-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* @module @stdlib/blas-ext-base-gsort2sh\n*\n* @example\n* import gsort2sh from '@stdlib/blas-ext-base-gsort2sh' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* import gsort2sh from '@stdlib/blas-ext-base-gsort2sh' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using heapsort.\n*\n* @module @stdlib/blas-ext-base-gsorthp\n*\n* @example\n* import gsorthp from '@stdlib/blas-ext-base-gsorthp' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsorthp from '@stdlib/blas-ext-base-gsorthp' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsorthp( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnan( v1 ) || (v1 === v2 && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnan( v1 ) || ( v1 === t && isPositiveZero( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default gsorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using insertion sort.\n*\n* @module @stdlib/blas-ext-base-gsortins\n*\n* @example\n* import gsortins from '@stdlib/blas-ext-base-gsortins' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsortins from '@stdlib/blas-ext-base-gsortins' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortins( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZero( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZero( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction gsortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZero( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default gsortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc += (sum-t) + v;\n\t\t} else {\n\t\t\tc += (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn sum + c;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport gsumkbn from '@stdlib/blas-ext-base-gsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsum( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsum( N, x, stride ) {\n\treturn gsumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default gsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumors( N, x, stride ) {\n\tvar ix;\n\tvar m;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ts += x[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn s;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ts += x[i] + x[i+1] + x[i+2] + x[i+3] + x[i+4] + x[i+5];\n\t\t}\n\t\treturn s;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gsumpw( n, x, stride, ix ) + gsumpw( N-n, x, stride, ix+(n*stride) );\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sapx( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 3.0, 6.0, 8.0, 0.0, 9.0, 5.0, 4.0, 2.0 ]\n*/\nfunction sapx( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] += alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] += alpha;\n\t\t\tx[ i+1 ] += alpha;\n\t\t\tx[ i+2 ] += alpha;\n\t\t\tx[ i+3 ] += alpha;\n\t\t\tx[ i+4 ] += alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sort a strided array using Shellsort.\n*\n* @module @stdlib/blas-ext-base-gsortsh\n*\n* @example\n* import gsortsh from '@stdlib/blas-ext-base-gsortsh' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh( x.length, 1.0, x, 1 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* @example\n* import gsortsh from '@stdlib/blas-ext-base-gsortsh' ;\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n*\n* gsortsh.ndarray( x.length, 1.0, x, 1, 0 );\n* // x => [ -4.0, -2.0, 1.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using an improved Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas-ext-base-gsumkbn\n*\n* @example\n* import gsumkbn from '@stdlib/blas-ext-base-gsumkbn' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gsumkbn from '@stdlib/blas-ext-base-gsumkbn' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements.\n*\n* @module @stdlib/blas-ext-base-gsum\n*\n* @example\n* import gsum from '@stdlib/blas-ext-base-gsum' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsum( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gsum from '@stdlib/blas-ext-base-gsum' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsum.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gsumkbn } from '@stdlib/blas-ext-base-gsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsum( N, x, stride, offset ) {\n\treturn gsumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default gsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* @module @stdlib/blas-ext-base-gsumkbn2\n*\n* @example\n* import gsumkbn2 from '@stdlib/blas-ext-base-gsumkbn2' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumkbn2( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gsumkbn2 from '@stdlib/blas-ext-base-gsumkbn2' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn2.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = sum + v;\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = (sum-t) + v;\n\t\t} else {\n\t\t\tc = (v-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\tix += stride;\n\t}\n\treturn sum + cs + ccs;\n}\n\n\n// EXPORTS //\n\nexport default gsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas-ext-base-gsumors\n*\n* @example\n* import gsumors from '@stdlib/blas-ext-base-gsumors' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumors( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gsumors from '@stdlib/blas-ext-base-gsumors' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumors.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumors( N, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar s;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn s;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ts += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn s;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += x[ ix ];\n\t\tix += stride;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gsumpw\n*\n* @example\n* import gsumpw from '@stdlib/blas-ext-base-gsumpw' ;\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumpw( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n* import gsumpw from '@stdlib/blas-ext-base-gsumpw' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumpw.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sapx from './sapx.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sapx, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each element in a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n* var alpha = 5.0;\n*\n* sapx( 3, alpha, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, 1.0, 10.0, -1.0 ]\n*/\nfunction sapx( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] += alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] += alpha;\n\t\t\tx[ ix+1 ] += alpha;\n\t\t\tx[ ix+2 ] += alpha;\n\t\t\tx[ ix+3 ] += alpha;\n\t\t\tx[ ix+4 ] += alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] += alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sapx;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar fround = ( typeof Math.fround === 'function' ) ? Math.fround : null; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default fround;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* import nativeClass from '@stdlib/utils-native-class' ;\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support' ;\nimport builtin from './native_class.js' ;\nimport polyfill from './polyfill.js' ;\n\n\n// MAIN //\n\nvar nativeClass;\nif ( hasToStringTag() ) {\n\tnativeClass = polyfill;\n} else {\n\tnativeClass = builtin;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasSymbols from '@stdlib/assert-has-symbol-support' ;\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nexport default hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nexport default toStr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nexport default hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nexport default toStrTag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport toStringTag from './tostringtag.js' ;\nimport toStr from './tostring.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toStr from './tostring.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class' ;\n\n\n// VARIABLES //\n\nvar hasFloat32Array = ( typeof Float32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float32Array\n*\n* @example\n* var bool = isFloat32Array( new Float32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat32Array( [] );\n* // returns false\n*/\nfunction isFloat32Array( value ) {\n\treturn (\n\t\t( hasFloat32Array && value instanceof Float32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isFloat32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float32Array === 'function' ) ? Float32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float32Array === 'function' ) ? Float32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of single-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float32\n*\n* @example\n* import ctor from '@stdlib/array-float32' ;\n*\n* var arr = new ctor( 10 );\n* // returns <Float32Array>\n*/\n\n// MODULES //\n\nimport hasFloat32ArraySupport from '@stdlib/assert-has-float32array-support' ;\nimport builtin from './float32array.js' ;\nimport polyfill from './polyfill.js' ;\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat32Array from '@stdlib/assert-is-float32array' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport GlobalFloat32Array from './float32array.js' ;\n\n\n// MAIN //\n\n/**\n* Tests for native `Float32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float32Array` support\n*\n* @example\n* var bool = hasFloat32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat32Array( [ 1.0, 3.14, -3.14, 5.0e40 ] );\n\t\tbool = (\n\t\t\tisFloat32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.140000104904175 &&\n\t\t\tarr[ 2 ] === -3.140000104904175 &&\n\t\t\tarr[ 3 ] === PINF\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasFloat32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of single-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32' ;\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\n\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {number} nearest single-precision floating-point number\n*\n* @example\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\nfunction float64ToFloat32( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-to-float32\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\n*\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\n\n// MODULES //\n\nimport builtin from './main.js' ;\nimport polyfill from './polyfill.js' ;\n\n\n// MAIN //\n\nvar float64ToFloat32;\nif ( typeof builtin === 'function' ) {\n\tfloat64ToFloat32 = builtin;\n} else {\n\tfloat64ToFloat32 = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumkbn( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsumkbn( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sapxsumkbn from '@stdlib/blas-ext-base-sapxsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsum( N, alpha, x, stride ) {\n\treturn sapxsumkbn( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumkbn2( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumkbn2( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumors( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumors( N, alpha, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + float64ToFloat32( alpha+x[ ix ] ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = float64ToFloat32( alpha + x[ ix ] );\n\t\ts1 = float64ToFloat32( alpha + x[ ix+stride ] );\n\t\ts2 = float64ToFloat32( alpha + x[ ix+(2*stride) ] );\n\t\ts3 = float64ToFloat32( alpha + x[ ix+(3*stride) ] );\n\t\ts4 = float64ToFloat32( alpha + x[ ix+(4*stride) ] );\n\t\ts5 = float64ToFloat32( alpha + x[ ix+(5*stride) ] );\n\t\ts6 = float64ToFloat32( alpha + x[ ix+(6*stride) ] );\n\t\ts7 = float64ToFloat32( alpha + x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + float64ToFloat32( alpha + x[ ix+stride ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + float64ToFloat32( alpha + x[ ix+(2*stride) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + float64ToFloat32( alpha + x[ ix+(3*stride) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + float64ToFloat32( alpha + x[ ix+(4*stride) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + float64ToFloat32( alpha + x[ ix+(5*stride) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + float64ToFloat32( alpha + x[ ix+(6*stride) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + float64ToFloat32( alpha + x[ ix+(7*stride) ] ) );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sapxsumpw( n, alpha, x, stride, ix ) + sapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport floor from '@stdlib/math-base-special-floor' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sasumpw( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction sasumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+stride ] );\n\t\ts2 = abs( x[ ix+(2*stride) ] );\n\t\ts3 = abs( x[ ix+(3*stride) ] );\n\t\ts4 = abs( x[ ix+(4*stride) ] );\n\t\ts5 = abs( x[ ix+(5*stride) ] );\n\t\ts6 = abs( x[ ix+(6*stride) ] );\n\t\ts7 = abs( x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + abs( x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + abs( x[ ix+stride ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + abs( x[ ix+(2*stride) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + abs( x[ ix+(3*stride) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + abs( x[ ix+(4*stride) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + abs( x[ ix+(5*stride) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + abs( x[ ix+(6*stride) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + abs( x[ ix+(7*stride) ] ) );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sasumpw( n, x, stride, ix ) + sasumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sasumpw( N, x, 1 );\n* // returns 5.0\n*/\nfunction sasumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumkbn( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumkbn( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( s + v );\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( s-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + s ) ); // eslint-disable-line max-len\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = float64ToFloat32( s + c );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumkbn( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\ts = sum;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( s + v );\n\t\tif ( abs( s ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( s-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + s ) ); // eslint-disable-line max-len\n\t\t}\n\t\ts = t;\n\t\ty[ iy ] = float64ToFloat32( s + c );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport scusumkbn from '@stdlib/blas-ext-base-scusumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusum( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusum( N, sum, x, strideX, y, strideY ) {\n\treturn scusumkbn( N, sum, x, strideX, y, strideY );\n}\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumkbn2( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumkbn2( N, sum, x, strideX, y, strideY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\n\t\ty[ iy ] = float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumors( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumors( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation:\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumpw( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumpw( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tif ( N <= BLOCKSIZE ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\ty[ iy ] = float64ToFloat32( sum + s );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t\treturn y;\n\t}\n\tn = floor( N/2 );\n\tscusumpw( n, sum, x, strideX, ix, y, strideY, iy );\n\tiy += (n-1) * strideY;\n\tscusumpw( N-n, y[ iy ], x, strideX, ix+(n*strideX), y, strideY, iy+strideY ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cusum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scusumpw( N, 0.0, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0 ]\n*/\nfunction scusumpw( N, sum, x, strideX, y, strideY ) {\n\tvar ix;\n\tvar iy;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\treturn cusum( N, sum, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdsapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sdsapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdsapxsumpw( n, alpha, x, stride, ix ) + sdsapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdsapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sdsapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sdsapxsumpw from '@stdlib/blas-ext-base-sdsapxsumpw' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdsapxsum( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sdsapxsum( N, alpha, x, stride ) {\n\treturn sdsapxsumpw( N, alpha, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdsnansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdsnansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts1 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts2 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts3 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts4 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts5 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts6 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t\ts7 += ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdsnansumpw( n, x, stride, ix ) + sdsnansumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdsnansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdsnansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sdsnansumpw from '@stdlib/blas-ext-base-sdsnansumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdsnansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdsnansum( N, x, stride ) {\n\treturn sdsnansumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdssumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdssumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sdssumpw( n, x, stride, ix ) + sdssumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation with extended accumulation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdssumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdssumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn float64ToFloat32( s );\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sdssumpw from '@stdlib/blas-ext-base-sdssumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdssum( N, x, 1 );\n* // returns 1.0\n*/\nfunction sdssum( N, x, stride ) {\n\treturn sdssumpw( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a single-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* sfill( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction sfill( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] = alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] = alpha;\n\t\t\tx[ i+1 ] = alpha;\n\t\t\tx[ i+2 ] = alpha;\n\t\t\tx[ i+3 ] = alpha;\n\t\t\tx[ i+4 ] = alpha;\n\t\t\tx[ i+5 ] = alpha;\n\t\t\tx[ i+6 ] = alpha;\n\t\t\tx[ i+7 ] = alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\tsum = t;\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport snansumkbn from '@stdlib/blas-ext-base-snansumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansum( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansum( N, x, stride ) {\n\treturn snansumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = float64ToFloat32( sum + v );\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = float64ToFloat32( cs + c );\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(cs-t) + c );\n\t\t\t} else {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(c-t) + cs );\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs = float64ToFloat32( ccs + cc );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs + ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts1 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts2 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts3 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts4 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts5 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts6 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\t\ts7 = ( isnanf( x[ ix ] ) ) ? 0.0 : x[ ix ];\n\t\tix += stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = ( isnanf( x[ ix ] ) ) ? s0 : float64ToFloat32( s0 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts1 = ( isnanf( x[ ix ] ) ) ? s1 : float64ToFloat32( s1 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts2 = ( isnanf( x[ ix ] ) ) ? s2 : float64ToFloat32( s2 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts3 = ( isnanf( x[ ix ] ) ) ? s3 : float64ToFloat32( s3 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts4 = ( isnanf( x[ ix ] ) ) ? s4 : float64ToFloat32( s4 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts5 = ( isnanf( x[ ix ] ) ) ? s5 : float64ToFloat32( s5 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts6 = ( isnanf( x[ ix ] ) ) ? s6 : float64ToFloat32( s6 + x[ ix ] );\n\t\t\tix += stride;\n\t\t\ts7 = ( isnanf( x[ ix ] ) ) ? s7 : float64ToFloat32( s7 + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( snansumpw( n, x, stride, ix ) + snansumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snansumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction snansumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ 0 ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a single-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* srev( x.length, x, 1 );\n* // x => <Float32Array>[ -3.0, -1.0, 0.0, 4.0, -5.0, 3.0, 1.0, -2.0 ]\n*/\nfunction srev( N, x, stride ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( ix = 0; ix < m; ix++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tiy -= 1;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( ix = m; ix < n; ix += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sapxsumkbn from './sapxsumkbn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sapxsum from './sapxsum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sapxsumkbn } from '@stdlib/blas-ext-base-sapxsumkbn' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsum( N, alpha, x, stride, offset ) {\n\treturn sapxsumkbn( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default sapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sapxsumkbn2 from './sapxsumkbn2.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sapxsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsumkbn2( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumkbn2( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = float64ToFloat32( alpha + x[ ix ] );\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sapxsumors from './sapxsumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sapxsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sapxsumors( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumors( N, alpha, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + float64ToFloat32( alpha+x[ ix ] ) );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default sapxsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sapxsumpw from './sapxsumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sasumpw from './sasumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport scusumkbn from './scusumkbn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( scusumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport scusum from './scusum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( scusum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as scusumkbn } from '@stdlib/blas-ext-base-scusumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusum( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusum( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\treturn scusumkbn( N, sum, x, strideX, offsetX, y, strideY, offsetY );\n}\n\n\n// EXPORTS //\n\nexport default scusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport scusumkbn2 from './scusumkbn2.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( scusumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumkbn2( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumkbn2( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ccs;\n\tvar ix;\n\tvar iy;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\n\t\ty[ iy ] = float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport scusumors from './scusumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( scusumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\n\n\n// MAIN //\n\n/**\n* Computes the cumulative sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} sum - initial sum\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scusumors( N, 0.0, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -1.0, 1.0, 5.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scusumors( N, sum, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\ty[ iy ] = sum;\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scusumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport scusumpw from './scusumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( scusumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scusumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sdsapxsumpw from './sdsapxsumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sdsapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sdsapxsum from './sdsapxsum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sdsapxsum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdsapxsumpw } from '@stdlib/blas-ext-base-sdsapxsumpw' ;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdsapxsum( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sdsapxsum( N, alpha, x, stride, offset ) {\n\treturn sdsapxsumpw( N, alpha, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default sdsapxsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sdsnansumpw from './sdsnansumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sdsnansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsnansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sdsnansum from './sdsnansum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sdsnansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdsnansumpw } from '@stdlib/blas-ext-base-sdsnansumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdsnansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdsnansum( N, x, stride, offset ) {\n\treturn sdsnansumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default sdsnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sdssumpw from './sdssumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sdssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sdssum from './sdssum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sdssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as sdssumpw } from '@stdlib/blas-ext-base-sdssumpw' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdssum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction sdssum( N, x, stride, offset ) {\n\treturn sdssumpw( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default sdssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sfill from './sfill.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sfill, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a single-precision floating-point strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* sfill( 3, 5.0, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction sfill( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport snansumkbn from './snansumkbn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport snansum from './snansum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( snansum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as snansumkbn } from '@stdlib/blas-ext-base-snansumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansum( N, x, stride, offset ) {\n\treturn snansumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default snansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport snansumkbn2 from './snansumkbn2.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( snansumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) === false ) {\n\t\t\tt = float64ToFloat32( sum + v );\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t\t} else {\n\t\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = float64ToFloat32( cs + c );\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(cs-t) + c );\n\t\t\t} else {\n\t\t\t\tcc = float64ToFloat32( float64ToFloat32(c-t) + cs );\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs = float64ToFloat32( ccs + cc );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs + ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default snansumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport snansumors from './snansumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( snansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values and using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snansumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction snansumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnanf( x[ offset ] ) ) {\n\t\t\treturn sum;\n\t\t}\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( isnanf( x[ ix ] ) === false ) {\n\t\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\t}\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default snansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport snansumpw from './snansumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( snansumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default snansumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport srev from './srev.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( srev, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\nvar M = 3;\n\n\n// MAIN //\n\n/**\n* Reverses a single-precision floating-point strided array in-place.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n*\n* srev( 3, x, 1, x.length-3 );\n* // x => <Float32Array>[ 1.0, -2.0, 3.0, -6.0, 5.0, -4.0 ]\n*/\nfunction srev( N, x, stride, offset ) {\n\tvar tmp;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tn = floor( N/2 );\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = n % M;\n\t\tiy = ix + N - 1;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ttmp = x[ ix ];\n\t\t\t\tx[ ix ] = x[ iy ];\n\t\t\t\tx[ iy ] = tmp;\n\t\t\t\tix += stride;\n\t\t\t\tiy -= stride;\n\t\t\t}\n\t\t}\n\t\tif ( n < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < n; i += M ) {\n\t\t\ttmp = x[ ix ];\n\t\t\tx[ ix ] = x[ iy ];\n\t\t\tx[ iy ] = tmp;\n\n\t\t\ttmp = x[ ix+1 ];\n\t\t\tx[ ix+1 ] = x[ iy-1 ];\n\t\t\tx[ iy-1 ] = tmp;\n\n\t\t\ttmp = x[ ix+2 ];\n\t\t\tx[ ix+2 ] = x[ iy-2 ];\n\t\t\tx[ iy-2 ] = tmp;\n\n\t\t\tix += M;\n\t\t\tiy -= M;\n\t\t}\n\t\treturn x;\n\t}\n\tiy = ix + ((N-1)*stride);\n\tfor ( i = 0; i < n; i++ ) {\n\t\ttmp = x[ ix ];\n\t\tx[ ix ] = x[ iy ];\n\t\tx[ iy ] = tmp;\n\t\tix += stride;\n\t\tiy -= stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default srev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class' ;\n\n\n// VARIABLES //\n\nvar hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint32Array\n*\n* @example\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint32Array( [] );\n* // returns false\n*/\nfunction isUint32Array( value ) {\n\treturn (\n\t\t( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint32\n*\n* @example\n* import ctor from '@stdlib/array-uint32' ;\n*\n* var arr = new ctor( 10 );\n* // returns <Uint32Array>\n*/\n\n// MODULES //\n\nimport hasUint32ArraySupport from '@stdlib/assert-has-uint32array-support' ;\nimport builtin from './uint32array.js' ;\nimport polyfill from './polyfill.js' ;\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint32Array from '@stdlib/assert-is-uint32array' ;\nimport UINT32_MAX from '@stdlib/constants-uint32-max' ;\nimport GlobalUint32Array from './uint32array.js' ;\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float32-pinf\n* @type {number}\n*\n* @example\n* import FLOAT32_PINF from '@stdlib/constants-float32-pinf' ;\n* // returns +infinity\n*/\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32' ;\nimport Uint32Array from '@stdlib/array-uint32' ;\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `2139095040` and to the HEX value `0x7f800000`.\n*\n* @constant\n* @type {number}\n* @default 0x7f800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_PINF = 0x7f800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_PINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\n\nexport default v;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float32-pinf' ;\n\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZerof( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZerof( -0.0 );\n* // returns false\n*/\nfunction isPositiveZerof( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveZerof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math-base-assert-is-positive-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2hp( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2hp( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnanf( v1 ) || ( v1 === tx && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssort2hp from './ssort2hp.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssort2hp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math-base-assert-is-positive-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2hp( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2hp( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar tx;\n\tvar ty;\n\tvar ix;\n\tvar iy;\n\tvar n;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\ttx = x[ offsetX+(parent*strideX) ];\n\t\t\tty = y[ offsetY+(parent*strideY) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\tix = offsetX + (n*strideX);\n\t\t\ttx = x[ ix ];\n\t\t\tiy = offsetY + (n*strideY);\n\t\t\tty = y[ iy ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ ix ] = x[ offsetX ];\n\t\t\ty[ iy ] = y[ offsetY ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offsetX+(k*strideX) ];\n\t\t\t\tv2 = x[ offsetX+(child*strideX) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offsetX+(child*strideX) ];\n\t\t\tif ( v1 > tx || isnanf( v1 ) || ( v1 === tx && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offsetX+(j*strideX) ] = v1;\n\t\t\t\ty[ offsetY+(j*strideY) ] = y[ offsetY+(child*strideY) ];\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offsetX+(j*strideX) ] = tx;\n\t\ty[ offsetY+(j*strideY) ] = ty;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssort2hp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float32-ninf\n* @type {number}\n*\n* @example\n* import FLOAT32_NINF from '@stdlib/constants-float32-ninf' ;\n* // returns -infinity\n*/\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32' ;\nimport Uint32Array from '@stdlib/array-uint32' ;\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `4286578688` and to the HEX value `0xff800000`.\n*\n* @constant\n* @type {number}\n* @default 0xff800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_NINF = 0xff800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_NINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\n\nexport default v;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float32-ninf' ;\n\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZerof( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZerof( 0.0 );\n* // returns false\n*/\nfunction isNegativeZerof( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeZerof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2ins( N, order, x, strideX, y, strideY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideY < 0 ) {\n\t\tfy = (1-N) * strideY;\n\t\tly = 0;\n\t} else {\n\t\tfy = 0;\n\t\tly = (N-1) * strideY;\n\t}\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * strideX; // first index\n\t\tlx = 0;               // last index\n\t\tix = fx + strideX;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * strideX; // last index\n\tix = fx + strideX;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssort2ins from './ssort2ins.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssort2ins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZerof( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2sh( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2sh( N, order, x, strideX, y, strideY ) {\n\tvar offsetX;\n\tvar offsetY;\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t}\n\tif ( strideX < 0 ) {\n\t\toffsetX = (1-N) * strideX;\n\t} else {\n\t\toffsetX = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\toffsetY = (1-N) * strideY;\n\t} else {\n\t\toffsetY = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two single-precision floating-point strided arrays based on the sort order of the first array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` index increment\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` index increment\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {Float32Array} `x`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n* var y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\n*\n* ssort2sh( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => <Float32Array>[ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction ssort2sh( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar gap;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tvx = x[ offsetX+(j*strideX) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( vx ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvy = y[ offsetY+(j*strideY) ];\n\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( vx );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tux = x[ offsetX+((k-gap)*strideX) ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offsetX+(k*strideX) ] = ux;\n\t\t\t\ty[ offsetY+(k*strideY) ] = y[ offsetY+((k-gap)*strideY) ];\n\t\t\t}\n\t\t\tx[ offsetX+(k*strideX) ] = vx;\n\t\t\ty[ offsetY+(k*strideY) ] = vy;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math-base-assert-is-positive-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssorthp( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssorthp( N, order, x, stride ) {\n\tvar offset;\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnanf( v1 ) || ( v1 === t && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortins( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortins( N, order, x, stride ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\t\tfx = (1-N) * stride; // first index\n\t\tlx = 0;              // last index\n\t\tix = fx + stride;\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\tfx = 0;              // first index\n\tlx = (N-1) * stride; // last index\n\tix = fx + stride;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssort2sh from './ssort2sh.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssort2sh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssort2sh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssorthp from './ssorthp.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssorthp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveZerof from '@stdlib/math-base-assert-is-positive-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using heapsort.\n*\n* ## Notes\n*\n* -   This implementation uses an in-place algorithm derived from the work of Floyd (1964).\n*\n* ## References\n*\n* -   Williams, John William Joseph. 1964. \"Algorithm 232: Heapsort.\" _Communications of the ACM_ 7 (6). New York, NY, USA: Association for Computing Machinery: 347–49. doi:[10.1145/512274.512284](https://doi.org/10.1145/512274.512284).\n* -   Floyd, Robert W. 1964. \"Algorithm 245: Treesort.\" _Communications of the ACM_ 7 (12). New York, NY, USA: Association for Computing Machinery: 701. doi:[10.1145/355588.365103](https://doi.org/10.1145/355588.365103).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssorthp( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssorthp( N, order, x, stride, offset ) {\n\tvar parent;\n\tvar child;\n\tvar v1;\n\tvar v2;\n\tvar n;\n\tvar t;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\t// Set the initial heap size:\n\tn = N;\n\n\t// Specify an initial \"parent\" index for building the heap:\n\tparent = floor( N / 2 );\n\n\t// Continue looping until the array is sorted...\n\twhile ( true ) {\n\t\tif ( parent > 0 ) {\n\t\t\t// We need to build the heap...\n\t\t\tparent -= 1;\n\t\t\tt = x[ offset+(parent*stride) ];\n\t\t} else {\n\t\t\t// Reduce the heap size:\n\t\t\tn -= 1;\n\n\t\t\t// Check if the heap is empty, and, if so, we are finished sorting...\n\t\t\tif ( n === 0 ) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\t// Store the last heap value in a temporary variable in order to make room for the heap root being placed into its sorted position:\n\t\t\ti = offset + (n*stride);\n\t\t\tt = x[ i ];\n\n\t\t\t// Move the heap root to its sorted position:\n\t\t\tx[ i ] = x[ offset ];\n\t\t}\n\t\t// We need to \"sift down\", pushing `t` down the heap to in order to replace the parent and satisfy the heap property...\n\n\t\t// Start at the parent index:\n\t\tj = parent;\n\n\t\t// Get the \"left\" child index:\n\t\tchild = (j*2) + 1;\n\n\t\twhile ( child < n ) {\n\t\t\t// Find the largest child...\n\t\t\tk = child + 1;\n\t\t\tif ( k < n ) {\n\t\t\t\tv1 = x[ offset+(k*stride) ];\n\t\t\t\tv2 = x[ offset+(child*stride) ];\n\n\t\t\t\t// Check if a \"right\" child exists and is \"bigger\"...\n\t\t\t\tif ( v1 > v2 || isnanf( v1 ) || (v1 === v2 && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t\tchild += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the largest child is bigger than `t`...\n\t\t\tv1 = x[ offset+(child*stride) ];\n\t\t\tif ( v1 > t || isnanf( v1 ) || ( v1 === t && isPositiveZerof( v1 ) ) ) { // eslint-disable-line max-len\n\t\t\t\t// Insert the larger child value:\n\t\t\t\tx[ offset+(j*stride) ] = v1;\n\n\t\t\t\t// Update `j` to point to the child index:\n\t\t\t\tj = child;\n\n\t\t\t\t// Get the \"left\" child index and repeat...\n\t\t\t\tchild = (j*2) + 1;\n\t\t\t} else {\n\t\t\t\t// We've found `t`'s place in the heap...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Insert `t` into the heap:\n\t\tx[ offset+(j*stride) ] = t;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ssorthp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssortins from './ssortins.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssortins, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortins( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortins( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar v;\n\tvar u;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfx = offset;              // first index\n\tlx = fx + ((N-1)*stride); // last index\n\tix = fx + stride;\n\n\tif ( stride < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tjx = ix;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\t\tjx += stride;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = v;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZerof( v );\n\t\t\t\tjx = ix - stride;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tu = x[ jx ];\n\t\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\t\tjx -= stride;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = v;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tv = x[ ix ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnanf( v ) ) {\n\t\t\tjx = ix;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+stride ];\n\t\t\t\tjx += stride;\n\t\t\t}\n\t\t\tx[ lx ] = v;\n\t\t} else {\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tjx = ix - stride;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tu = x[ jx ];\n\t\t\t\tif ( u <= v && !(flg && u === v && isNegativeZerof( u ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+stride ] = u;\n\t\t\t\tjx -= stride;\n\t\t\t}\n\t\t\tx[ jx+stride ] = v;\n\t\t\tix += stride;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride ) {\n\tvar offset;\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t}\n\tif ( stride < 0 ) {\n\t\toffset = (1-N) * stride;\n\t} else {\n\t\toffset = 0;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof' ;\nimport isnanf from '@stdlib/math-base-assert-is-nanf' ;\nimport GAPS from './gaps.json' ;\n\n\n// VARIABLES //\n\nvar NGAPS = GAPS.length;\n\n\n// MAIN //\n\n/**\n* Sorts a single-precision floating-point strided array using Shellsort.\n*\n* ## Notes\n*\n* -   This implementation uses the gap sequence proposed by Ciura (2001).\n*\n* ## References\n*\n* -   Shell, Donald L. 1959. \"A High-Speed Sorting Procedure.\" _Communications of the ACM_ 2 (7). Association for Computing Machinery: 30–32. doi:[10.1145/368370.368387](https://doi.org/10.1145/368370.368387).\n* -   Ciura, Marcin. 2001. \"Best Increments for the Average Case of Shellsort.\" In _Fundamentals of Computation Theory_, 106–17. Springer Berlin Heidelberg. doi:[10.1007/3-540-44669-9\\_12](https://doi.org/10.1007/3-540-44669-9_12).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Float32Array} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\n*\n* ssortsh( x.length, 1.0, x, 1, 0 );\n* // x => <Float32Array>[ -4.0, -2.0, 1.0, 3.0 ]\n*/\nfunction ssortsh( N, order, x, stride, offset ) {\n\tvar flg;\n\tvar gap;\n\tvar v;\n\tvar u;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstride *= -1;\n\t\toffset -= (N-1) * stride;\n\t}\n\tfor ( i = 0; i < NGAPS; i++ ) {\n\t\tgap = GAPS[ i ];\n\t\tfor ( j = gap; j < N; j++ ) {\n\t\t\tv = x[ offset+(j*stride) ];\n\n\t\t\t// If `NaN`, the current value is already sorted to its place...\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Perform insertion sort on the \"gapped\" subarray...\n\t\t\tflg = isNegativeZerof( v );\n\t\t\tfor ( k = j; k >= gap; k -= gap ) {\n\t\t\t\tu = x[ offset+((k-gap)*stride) ];\n\t\t\t\tif ( u <= v && !(flg && u === v) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ offset+(k*stride) ] = u;\n\t\t\t}\n\t\t\tx[ offset+(k*stride) ] = v;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumkbn( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumkbn( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssumkbn( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumkbn( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tc = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum + v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( sum-t ) + v ) ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tc = float64ToFloat32( c + float64ToFloat32( float64ToFloat32( v-t ) + sum ) ); // eslint-disable-line max-len\n\t\t}\n\t\tsum = t;\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + c );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ssumkbn from '@stdlib/blas-ext-base-ssumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssum( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssum( N, x, stride ) {\n\treturn ssumkbn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumkbn2( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumkbn2( N, x, stride ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumors( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport floor from '@stdlib/math-base-special-floor' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + x[ ix ] );\n\t\t\ts1 = float64ToFloat32( s1 + x[ ix+stride ] );\n\t\t\ts2 = float64ToFloat32( s2 + x[ ix+(2*stride) ] );\n\t\t\ts3 = float64ToFloat32( s3 + x[ ix+(3*stride) ] );\n\t\t\ts4 = float64ToFloat32( s4 + x[ ix+(4*stride) ] );\n\t\t\ts5 = float64ToFloat32( s5 + x[ ix+(5*stride) ] );\n\t\t\ts6 = float64ToFloat32( s6 + x[ ix+(6*stride) ] );\n\t\t\ts7 = float64ToFloat32( s7 + x[ ix+(7*stride) ] );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( ssumpw( n, x, stride, ix ) + ssumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssortsh from './ssortsh.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssortsh, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssortsh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssumkbn from './ssumkbn.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssumkbn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssum from './ssum.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssum, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as ssumkbn } from '@stdlib/blas-ext-base-ssumkbn' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssum( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssum( N, x, stride, offset ) {\n\treturn ssumkbn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default ssum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssumkbn2 from './ssumkbn2.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using a second-order iterative Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan–Babuška algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssumkbn2( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumkbn2( N, x, stride, offset ) {\n\tvar sum;\n\tvar ccs;\n\tvar ix;\n\tvar cs;\n\tvar cc;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tt = float64ToFloat32( sum+v );\n\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\tc = float64ToFloat32( float64ToFloat32( sum-t ) + v );\n\t\t} else {\n\t\t\tc = float64ToFloat32( float64ToFloat32( v-t ) + sum );\n\t\t}\n\t\tsum = t;\n\t\tt = float64ToFloat32( cs+c );\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( cs-t ) + c );\n\t\t} else {\n\t\t\tcc = float64ToFloat32( float64ToFloat32( c-t ) + cs );\n\t\t}\n\t\tcs = t;\n\t\tccs = float64ToFloat32( ccs+cc );\n\t\tix += stride;\n\t}\n\treturn float64ToFloat32( sum + float64ToFloat32( cs+ccs ) );\n}\n\n\n// EXPORTS //\n\nexport default ssumkbn2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssumors from './ssumors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = ssumors( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn sum;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tsum = float64ToFloat32( sum + x[ ix ] );\n\t\tix += stride;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default ssumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport ssumpw from './ssumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( ssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name dapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapx}\n*/\nimport dapx from '@stdlib/blas-ext-base-dapx';\nsetReadOnly( ns, 'dapx', dapx );\n\n/**\n* @name dapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsum}\n*/\nimport dapxsum from '@stdlib/blas-ext-base-dapxsum';\nsetReadOnly( ns, 'dapxsum', dapxsum );\n\n/**\n* @name dapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn}\n*/\nimport dapxsumkbn from '@stdlib/blas-ext-base-dapxsumkbn';\nsetReadOnly( ns, 'dapxsumkbn', dapxsumkbn );\n\n/**\n* @name dapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumkbn2}\n*/\nimport dapxsumkbn2 from '@stdlib/blas-ext-base-dapxsumkbn2';\nsetReadOnly( ns, 'dapxsumkbn2', dapxsumkbn2 );\n\n/**\n* @name dapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumors}\n*/\nimport dapxsumors from '@stdlib/blas-ext-base-dapxsumors';\nsetReadOnly( ns, 'dapxsumors', dapxsumors );\n\n/**\n* @name dapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dapxsumpw}\n*/\nimport dapxsumpw from '@stdlib/blas-ext-base-dapxsumpw';\nsetReadOnly( ns, 'dapxsumpw', dapxsumpw );\n\n/**\n* @name dasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dasumpw}\n*/\nimport dasumpw from '@stdlib/blas-ext-base-dasumpw';\nsetReadOnly( ns, 'dasumpw', dasumpw );\n\n/**\n* @name dcusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusum}\n*/\nimport dcusum from '@stdlib/blas-ext-base-dcusum';\nsetReadOnly( ns, 'dcusum', dcusum );\n\n/**\n* @name dcusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumkbn}\n*/\nimport dcusumkbn from '@stdlib/blas-ext-base-dcusumkbn';\nsetReadOnly( ns, 'dcusumkbn', dcusumkbn );\n\n/**\n* @name dcusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumkbn2}\n*/\nimport dcusumkbn2 from '@stdlib/blas-ext-base-dcusumkbn2';\nsetReadOnly( ns, 'dcusumkbn2', dcusumkbn2 );\n\n/**\n* @name dcusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumors}\n*/\nimport dcusumors from '@stdlib/blas-ext-base-dcusumors';\nsetReadOnly( ns, 'dcusumors', dcusumors );\n\n/**\n* @name dcusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dcusumpw}\n*/\nimport dcusumpw from '@stdlib/blas-ext-base-dcusumpw';\nsetReadOnly( ns, 'dcusumpw', dcusumpw );\n\n/**\n* @name dfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dfill}\n*/\nimport dfill from '@stdlib/blas-ext-base-dfill';\nsetReadOnly( ns, 'dfill', dfill );\n\n/**\n* @name dnanasum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnanasum}\n*/\nimport dnanasum from '@stdlib/blas-ext-base-dnanasum';\nsetReadOnly( ns, 'dnanasum', dnanasum );\n\n/**\n* @name dnanasumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnanasumors}\n*/\nimport dnanasumors from '@stdlib/blas-ext-base-dnanasumors';\nsetReadOnly( ns, 'dnanasumors', dnanasumors );\n\n/**\n* @name dnannsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsum}\n*/\nimport dnannsum from '@stdlib/blas-ext-base-dnannsum';\nsetReadOnly( ns, 'dnannsum', dnannsum );\n\n/**\n* @name dnannsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumkbn}\n*/\nimport dnannsumkbn from '@stdlib/blas-ext-base-dnannsumkbn';\nsetReadOnly( ns, 'dnannsumkbn', dnannsumkbn );\n\n/**\n* @name dnannsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumkbn2}\n*/\nimport dnannsumkbn2 from '@stdlib/blas-ext-base-dnannsumkbn2';\nsetReadOnly( ns, 'dnannsumkbn2', dnannsumkbn2 );\n\n/**\n* @name dnannsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumors}\n*/\nimport dnannsumors from '@stdlib/blas-ext-base-dnannsumors';\nsetReadOnly( ns, 'dnannsumors', dnannsumors );\n\n/**\n* @name dnannsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnannsumpw}\n*/\nimport dnannsumpw from '@stdlib/blas-ext-base-dnannsumpw';\nsetReadOnly( ns, 'dnannsumpw', dnannsumpw );\n\n/**\n* @name dnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansum}\n*/\nimport dnansum from '@stdlib/blas-ext-base-dnansum';\nsetReadOnly( ns, 'dnansum', dnansum );\n\n/**\n* @name dnansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumkbn}\n*/\nimport dnansumkbn from '@stdlib/blas-ext-base-dnansumkbn';\nsetReadOnly( ns, 'dnansumkbn', dnansumkbn );\n\n/**\n* @name dnansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumkbn2}\n*/\nimport dnansumkbn2 from '@stdlib/blas-ext-base-dnansumkbn2';\nsetReadOnly( ns, 'dnansumkbn2', dnansumkbn2 );\n\n/**\n* @name dnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumors}\n*/\nimport dnansumors from '@stdlib/blas-ext-base-dnansumors';\nsetReadOnly( ns, 'dnansumors', dnansumors );\n\n/**\n* @name dnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dnansumpw}\n*/\nimport dnansumpw from '@stdlib/blas-ext-base-dnansumpw';\nsetReadOnly( ns, 'dnansumpw', dnansumpw );\n\n/**\n* @name drev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/drev}\n*/\nimport drev from '@stdlib/blas-ext-base-drev';\nsetReadOnly( ns, 'drev', drev );\n\n/**\n* @name dsapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsapxsum}\n*/\nimport dsapxsum from '@stdlib/blas-ext-base-dsapxsum';\nsetReadOnly( ns, 'dsapxsum', dsapxsum );\n\n/**\n* @name dsapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsapxsumpw}\n*/\nimport dsapxsumpw from '@stdlib/blas-ext-base-dsapxsumpw';\nsetReadOnly( ns, 'dsapxsumpw', dsapxsumpw );\n\n/**\n* @name dsnannsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnannsumors}\n*/\nimport dsnannsumors from '@stdlib/blas-ext-base-dsnannsumors';\nsetReadOnly( ns, 'dsnannsumors', dsnannsumors );\n\n/**\n* @name dsnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansum}\n*/\nimport dsnansum from '@stdlib/blas-ext-base-dsnansum';\nsetReadOnly( ns, 'dsnansum', dsnansum );\n\n/**\n* @name dsnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansumors}\n*/\nimport dsnansumors from '@stdlib/blas-ext-base-dsnansumors';\nsetReadOnly( ns, 'dsnansumors', dsnansumors );\n\n/**\n* @name dsnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsnansumpw}\n*/\nimport dsnansumpw from '@stdlib/blas-ext-base-dsnansumpw';\nsetReadOnly( ns, 'dsnansumpw', dsnansumpw );\n\n/**\n* @name dsort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2hp}\n*/\nimport dsort2hp from '@stdlib/blas-ext-base-dsort2hp';\nsetReadOnly( ns, 'dsort2hp', dsort2hp );\n\n/**\n* @name dsort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2ins}\n*/\nimport dsort2ins from '@stdlib/blas-ext-base-dsort2ins';\nsetReadOnly( ns, 'dsort2ins', dsort2ins );\n\n/**\n* @name dsort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsort2sh}\n*/\nimport dsort2sh from '@stdlib/blas-ext-base-dsort2sh';\nsetReadOnly( ns, 'dsort2sh', dsort2sh );\n\n/**\n* @name dsorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsorthp}\n*/\nimport dsorthp from '@stdlib/blas-ext-base-dsorthp';\nsetReadOnly( ns, 'dsorthp', dsorthp );\n\n/**\n* @name dsortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsortins}\n*/\nimport dsortins from '@stdlib/blas-ext-base-dsortins';\nsetReadOnly( ns, 'dsortins', dsortins );\n\n/**\n* @name dsortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsortsh}\n*/\nimport dsortsh from '@stdlib/blas-ext-base-dsortsh';\nsetReadOnly( ns, 'dsortsh', dsortsh );\n\n/**\n* @name dssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssum}\n*/\nimport dssum from '@stdlib/blas-ext-base-dssum';\nsetReadOnly( ns, 'dssum', dssum );\n\n/**\n* @name dssumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssumors}\n*/\nimport dssumors from '@stdlib/blas-ext-base-dssumors';\nsetReadOnly( ns, 'dssumors', dssumors );\n\n/**\n* @name dssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dssumpw}\n*/\nimport dssumpw from '@stdlib/blas-ext-base-dssumpw';\nsetReadOnly( ns, 'dssumpw', dssumpw );\n\n/**\n* @name dsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsum}\n*/\nimport dsum from '@stdlib/blas-ext-base-dsum';\nsetReadOnly( ns, 'dsum', dsum );\n\n/**\n* @name dsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumkbn}\n*/\nimport dsumkbn from '@stdlib/blas-ext-base-dsumkbn';\nsetReadOnly( ns, 'dsumkbn', dsumkbn );\n\n/**\n* @name dsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumkbn2}\n*/\nimport dsumkbn2 from '@stdlib/blas-ext-base-dsumkbn2';\nsetReadOnly( ns, 'dsumkbn2', dsumkbn2 );\n\n/**\n* @name dsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumors}\n*/\nimport dsumors from '@stdlib/blas-ext-base-dsumors';\nsetReadOnly( ns, 'dsumors', dsumors );\n\n/**\n* @name dsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/dsumpw}\n*/\nimport dsumpw from '@stdlib/blas-ext-base-dsumpw';\nsetReadOnly( ns, 'dsumpw', dsumpw );\n\n/**\n* @name gapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapx}\n*/\nimport gapx from '@stdlib/blas-ext-base-gapx';\nsetReadOnly( ns, 'gapx', gapx );\n\n/**\n* @name gapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsum}\n*/\nimport gapxsum from '@stdlib/blas-ext-base-gapxsum';\nsetReadOnly( ns, 'gapxsum', gapxsum );\n\n/**\n* @name gapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumkbn}\n*/\nimport gapxsumkbn from '@stdlib/blas-ext-base-gapxsumkbn';\nsetReadOnly( ns, 'gapxsumkbn', gapxsumkbn );\n\n/**\n* @name gapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumkbn2}\n*/\nimport gapxsumkbn2 from '@stdlib/blas-ext-base-gapxsumkbn2';\nsetReadOnly( ns, 'gapxsumkbn2', gapxsumkbn2 );\n\n/**\n* @name gapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumors}\n*/\nimport gapxsumors from '@stdlib/blas-ext-base-gapxsumors';\nsetReadOnly( ns, 'gapxsumors', gapxsumors );\n\n/**\n* @name gapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gapxsumpw}\n*/\nimport gapxsumpw from '@stdlib/blas-ext-base-gapxsumpw';\nsetReadOnly( ns, 'gapxsumpw', gapxsumpw );\n\n/**\n* @name gasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gasumpw}\n*/\nimport gasumpw from '@stdlib/blas-ext-base-gasumpw';\nsetReadOnly( ns, 'gasumpw', gasumpw );\n\n/**\n* @name gcusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusum}\n*/\nimport gcusum from '@stdlib/blas-ext-base-gcusum';\nsetReadOnly( ns, 'gcusum', gcusum );\n\n/**\n* @name gcusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumkbn}\n*/\nimport gcusumkbn from '@stdlib/blas-ext-base-gcusumkbn';\nsetReadOnly( ns, 'gcusumkbn', gcusumkbn );\n\n/**\n* @name gcusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumkbn2}\n*/\nimport gcusumkbn2 from '@stdlib/blas-ext-base-gcusumkbn2';\nsetReadOnly( ns, 'gcusumkbn2', gcusumkbn2 );\n\n/**\n* @name gcusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumors}\n*/\nimport gcusumors from '@stdlib/blas-ext-base-gcusumors';\nsetReadOnly( ns, 'gcusumors', gcusumors );\n\n/**\n* @name gcusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gcusumpw}\n*/\nimport gcusumpw from '@stdlib/blas-ext-base-gcusumpw';\nsetReadOnly( ns, 'gcusumpw', gcusumpw );\n\n/**\n* @name gfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gfill}\n*/\nimport gfill from '@stdlib/blas-ext-base-gfill';\nsetReadOnly( ns, 'gfill', gfill );\n\n/**\n* @name gfillBy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gfill-by}\n*/\nimport gfillBy from '@stdlib/blas-ext-base-gfill-by';\nsetReadOnly( ns, 'gfillBy', gfillBy );\n\n/**\n* @name gnannsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnannsumkbn}\n*/\nimport gnannsumkbn from '@stdlib/blas-ext-base-gnannsumkbn';\nsetReadOnly( ns, 'gnannsumkbn', gnannsumkbn );\n\n/**\n* @name gnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansum}\n*/\nimport gnansum from '@stdlib/blas-ext-base-gnansum';\nsetReadOnly( ns, 'gnansum', gnansum );\n\n/**\n* @name gnansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumkbn}\n*/\nimport gnansumkbn from '@stdlib/blas-ext-base-gnansumkbn';\nsetReadOnly( ns, 'gnansumkbn', gnansumkbn );\n\n/**\n* @name gnansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumkbn2}\n*/\nimport gnansumkbn2 from '@stdlib/blas-ext-base-gnansumkbn2';\nsetReadOnly( ns, 'gnansumkbn2', gnansumkbn2 );\n\n/**\n* @name gnansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumors}\n*/\nimport gnansumors from '@stdlib/blas-ext-base-gnansumors';\nsetReadOnly( ns, 'gnansumors', gnansumors );\n\n/**\n* @name gnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gnansumpw}\n*/\nimport gnansumpw from '@stdlib/blas-ext-base-gnansumpw';\nsetReadOnly( ns, 'gnansumpw', gnansumpw );\n\n/**\n* @name grev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/grev}\n*/\nimport grev from '@stdlib/blas-ext-base-grev';\nsetReadOnly( ns, 'grev', grev );\n\n/**\n* @name gsort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2hp}\n*/\nimport gsort2hp from '@stdlib/blas-ext-base-gsort2hp';\nsetReadOnly( ns, 'gsort2hp', gsort2hp );\n\n/**\n* @name gsort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2ins}\n*/\nimport gsort2ins from '@stdlib/blas-ext-base-gsort2ins';\nsetReadOnly( ns, 'gsort2ins', gsort2ins );\n\n/**\n* @name gsort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsort2sh}\n*/\nimport gsort2sh from '@stdlib/blas-ext-base-gsort2sh';\nsetReadOnly( ns, 'gsort2sh', gsort2sh );\n\n/**\n* @name gsorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsorthp}\n*/\nimport gsorthp from '@stdlib/blas-ext-base-gsorthp';\nsetReadOnly( ns, 'gsorthp', gsorthp );\n\n/**\n* @name gsortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsortins}\n*/\nimport gsortins from '@stdlib/blas-ext-base-gsortins';\nsetReadOnly( ns, 'gsortins', gsortins );\n\n/**\n* @name gsortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsortsh}\n*/\nimport gsortsh from '@stdlib/blas-ext-base-gsortsh';\nsetReadOnly( ns, 'gsortsh', gsortsh );\n\n/**\n* @name gsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsum}\n*/\nimport gsum from '@stdlib/blas-ext-base-gsum';\nsetReadOnly( ns, 'gsum', gsum );\n\n/**\n* @name gsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumkbn}\n*/\nimport gsumkbn from '@stdlib/blas-ext-base-gsumkbn';\nsetReadOnly( ns, 'gsumkbn', gsumkbn );\n\n/**\n* @name gsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumkbn2}\n*/\nimport gsumkbn2 from '@stdlib/blas-ext-base-gsumkbn2';\nsetReadOnly( ns, 'gsumkbn2', gsumkbn2 );\n\n/**\n* @name gsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumors}\n*/\nimport gsumors from '@stdlib/blas-ext-base-gsumors';\nsetReadOnly( ns, 'gsumors', gsumors );\n\n/**\n* @name gsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/gsumpw}\n*/\nimport gsumpw from '@stdlib/blas-ext-base-gsumpw';\nsetReadOnly( ns, 'gsumpw', gsumpw );\n\n/**\n* @name sapx\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapx}\n*/\nimport sapx from '@stdlib/blas-ext-base-sapx';\nsetReadOnly( ns, 'sapx', sapx );\n\n/**\n* @name sapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsum}\n*/\nimport sapxsum from '@stdlib/blas-ext-base-sapxsum';\nsetReadOnly( ns, 'sapxsum', sapxsum );\n\n/**\n* @name sapxsumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumkbn}\n*/\nimport sapxsumkbn from '@stdlib/blas-ext-base-sapxsumkbn';\nsetReadOnly( ns, 'sapxsumkbn', sapxsumkbn );\n\n/**\n* @name sapxsumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumkbn2}\n*/\nimport sapxsumkbn2 from '@stdlib/blas-ext-base-sapxsumkbn2';\nsetReadOnly( ns, 'sapxsumkbn2', sapxsumkbn2 );\n\n/**\n* @name sapxsumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumors}\n*/\nimport sapxsumors from '@stdlib/blas-ext-base-sapxsumors';\nsetReadOnly( ns, 'sapxsumors', sapxsumors );\n\n/**\n* @name sapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sapxsumpw}\n*/\nimport sapxsumpw from '@stdlib/blas-ext-base-sapxsumpw';\nsetReadOnly( ns, 'sapxsumpw', sapxsumpw );\n\n/**\n* @name sasumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sasumpw}\n*/\nimport sasumpw from '@stdlib/blas-ext-base-sasumpw';\nsetReadOnly( ns, 'sasumpw', sasumpw );\n\n/**\n* @name scusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusum}\n*/\nimport scusum from '@stdlib/blas-ext-base-scusum';\nsetReadOnly( ns, 'scusum', scusum );\n\n/**\n* @name scusumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumkbn}\n*/\nimport scusumkbn from '@stdlib/blas-ext-base-scusumkbn';\nsetReadOnly( ns, 'scusumkbn', scusumkbn );\n\n/**\n* @name scusumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumkbn2}\n*/\nimport scusumkbn2 from '@stdlib/blas-ext-base-scusumkbn2';\nsetReadOnly( ns, 'scusumkbn2', scusumkbn2 );\n\n/**\n* @name scusumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumors}\n*/\nimport scusumors from '@stdlib/blas-ext-base-scusumors';\nsetReadOnly( ns, 'scusumors', scusumors );\n\n/**\n* @name scusumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/scusumpw}\n*/\nimport scusumpw from '@stdlib/blas-ext-base-scusumpw';\nsetReadOnly( ns, 'scusumpw', scusumpw );\n\n/**\n* @name sdsapxsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsapxsum}\n*/\nimport sdsapxsum from '@stdlib/blas-ext-base-sdsapxsum';\nsetReadOnly( ns, 'sdsapxsum', sdsapxsum );\n\n/**\n* @name sdsapxsumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsapxsumpw}\n*/\nimport sdsapxsumpw from '@stdlib/blas-ext-base-sdsapxsumpw';\nsetReadOnly( ns, 'sdsapxsumpw', sdsapxsumpw );\n\n/**\n* @name sdsnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsnansum}\n*/\nimport sdsnansum from '@stdlib/blas-ext-base-sdsnansum';\nsetReadOnly( ns, 'sdsnansum', sdsnansum );\n\n/**\n* @name sdsnansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdsnansumpw}\n*/\nimport sdsnansumpw from '@stdlib/blas-ext-base-sdsnansumpw';\nsetReadOnly( ns, 'sdsnansumpw', sdsnansumpw );\n\n/**\n* @name sdssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdssum}\n*/\nimport sdssum from '@stdlib/blas-ext-base-sdssum';\nsetReadOnly( ns, 'sdssum', sdssum );\n\n/**\n* @name sdssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sdssumpw}\n*/\nimport sdssumpw from '@stdlib/blas-ext-base-sdssumpw';\nsetReadOnly( ns, 'sdssumpw', sdssumpw );\n\n/**\n* @name sfill\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/sfill}\n*/\nimport sfill from '@stdlib/blas-ext-base-sfill';\nsetReadOnly( ns, 'sfill', sfill );\n\n/**\n* @name snansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansum}\n*/\nimport snansum from '@stdlib/blas-ext-base-snansum';\nsetReadOnly( ns, 'snansum', snansum );\n\n/**\n* @name snansumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumkbn}\n*/\nimport snansumkbn from '@stdlib/blas-ext-base-snansumkbn';\nsetReadOnly( ns, 'snansumkbn', snansumkbn );\n\n/**\n* @name snansumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumkbn2}\n*/\nimport snansumkbn2 from '@stdlib/blas-ext-base-snansumkbn2';\nsetReadOnly( ns, 'snansumkbn2', snansumkbn2 );\n\n/**\n* @name snansumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumors}\n*/\nimport snansumors from '@stdlib/blas-ext-base-snansumors';\nsetReadOnly( ns, 'snansumors', snansumors );\n\n/**\n* @name snansumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/snansumpw}\n*/\nimport snansumpw from '@stdlib/blas-ext-base-snansumpw';\nsetReadOnly( ns, 'snansumpw', snansumpw );\n\n/**\n* @name srev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/srev}\n*/\nimport srev from '@stdlib/blas-ext-base-srev';\nsetReadOnly( ns, 'srev', srev );\n\n/**\n* @name ssort2hp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2hp}\n*/\nimport ssort2hp from '@stdlib/blas-ext-base-ssort2hp';\nsetReadOnly( ns, 'ssort2hp', ssort2hp );\n\n/**\n* @name ssort2ins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2ins}\n*/\nimport ssort2ins from '@stdlib/blas-ext-base-ssort2ins';\nsetReadOnly( ns, 'ssort2ins', ssort2ins );\n\n/**\n* @name ssort2sh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssort2sh}\n*/\nimport ssort2sh from '@stdlib/blas-ext-base-ssort2sh';\nsetReadOnly( ns, 'ssort2sh', ssort2sh );\n\n/**\n* @name ssorthp\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssorthp}\n*/\nimport ssorthp from '@stdlib/blas-ext-base-ssorthp';\nsetReadOnly( ns, 'ssorthp', ssorthp );\n\n/**\n* @name ssortins\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssortins}\n*/\nimport ssortins from '@stdlib/blas-ext-base-ssortins';\nsetReadOnly( ns, 'ssortins', ssortins );\n\n/**\n* @name ssortsh\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssortsh}\n*/\nimport ssortsh from '@stdlib/blas-ext-base-ssortsh';\nsetReadOnly( ns, 'ssortsh', ssortsh );\n\n/**\n* @name ssum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssum}\n*/\nimport ssum from '@stdlib/blas-ext-base-ssum';\nsetReadOnly( ns, 'ssum', ssum );\n\n/**\n* @name ssumkbn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumkbn}\n*/\nimport ssumkbn from '@stdlib/blas-ext-base-ssumkbn';\nsetReadOnly( ns, 'ssumkbn', ssumkbn );\n\n/**\n* @name ssumkbn2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumkbn2}\n*/\nimport ssumkbn2 from '@stdlib/blas-ext-base-ssumkbn2';\nsetReadOnly( ns, 'ssumkbn2', ssumkbn2 );\n\n/**\n* @name ssumors\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumors}\n*/\nimport ssumors from '@stdlib/blas-ext-base-ssumors';\nsetReadOnly( ns, 'ssumors', ssumors );\n\n/**\n* @name ssumpw\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/blas/ext/base/ssumpw}\n*/\nimport ssumpw from '@stdlib/blas-ext-base-ssumpw';\nsetReadOnly( ns, 'ssumpw', ssumpw );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( x.length, x, 1, out, 1 );\n* // returns [ 1.0, 3 ]\n*/\nfunction gnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar sum;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = sum;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = sum;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ];\n\t\tout[ io+strideOut ] = 1;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = sum + c;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/blas/ext/base}\n*/\nimport base from '@stdlib/blas-ext-base';\nsetReadOnly( ns, 'base', base );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["main","Object","defineProperty","objectProtoype","prototype","toStr","toString","defineGetter","__defineGetter__","defineSetter","__defineSetter__","lookupGetter","__lookupGetter__","lookupSetter","__lookupSetter__","defineProperty$1","err","hasDefinePropertySupport","builtin","obj","prop","descriptor","hasValue","hasGet","hasSet","call","TypeError","__proto__","value","Error","get","set","setReadOnly","configurable","enumerable","writable","setNonEnumerableReadOnly","dapx","N","alpha","x","stride","ix","i","m","abs","Math","dapxsumkbn","sum","v","t","c","offset","dapxsum","dapxsumkbn2","ccs","cs","cc","dapxsumors","ndarray","floor","dapxsumpw","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","dasumpw","dcusumkbn","strideX","y","strideY","iy","offsetX","offsetY","dcusum","dcusumkbn2","dcusumors","dcusumpw","cusum","dfill","isnan","dnanasumors","dnanasum","dnannsumkbn","out","strideOut","io","offsetOut","dnannsum","dnannsumkbn2","dnannsumors","sumpw","dnannsumpw","dnansumkbn","dnansum","dnansumkbn2","dnansumors","dnansumpw","drev","tmp","dsapxsumpw","dsapxsum","dsnannsumors","isnanf","dsnansumpw","dsnansum","dsnansumors","FLOAT64_PINF","Number","POSITIVE_INFINITY","isPositiveZero","PINF","dsort2hp","order","parent","child","v1","v2","tx","ty","j","k","FLOAT64_NINF","NEGATIVE_INFINITY","isNegativeZero","NINF","dsort2ins","flg","jx","fx","lx","jy","fy","ly","vx","vy","ux","NGAPS","GAPS","length","dsort2sh","gap","dsorthp","dsortins","u","dsortsh","dssumpw","dssum","dssumors","dsumkbn","dsum","dsumkbn2","dsumors","dsumpw","gapx","gapxsumkbn","gapxsum","gapxsumkbn2","gapxsumors","gapxsumpw","gasumpw","gcusumkbn","gcusum","gcusumkbn2","gcusumors","gcusumpw","getter","idx","setter","arraylike2object","bool","Boolean","data","accessors","getAccessor","getIndexed","setAccessor","setIndexed","gfill","xbuf","o","gfillBy","clbk","thisArg","gnansumkbn","gnansum","gnansumkbn2","gnansumors","gnansumpw","grev","gsort2hp","gsort2ins","gsort2sh","gsorthp","gsortins","gsortsh","gsumkbn","gsum","gsumkbn2","gsumors","gsumpw","sapx","nativeClass","fround","FLG","Symbol","has","hasOwnProperty","toStrTag","toStringTag","isOwn","tag","property","nativeClass$1","hasFloat32Array","Float32Array","ctor","Float32Array$1","arr","GlobalFloat32Array","hasFloat32ArraySupport","FLOAT32_VIEW","float64ToFloat32$1","sapxsumkbn","float64ToFloat32","sapxsum","sapxsumkbn2","sapxsumors","sapxsumpw","sasumpw","scusumkbn","scusum","scusumkbn2","scusumors","scusumpw","sdsapxsumpw","sdsapxsum","sdsnansumpw","sdsnansum","sdssumpw","sdssum","sfill","snansumkbn","snansum","snansumkbn2","snansumors","snansumpw","srev","hasUint32Array","Uint32Array","Uint32Array$1","GlobalUint32Array","UINT32_MAX","hasUint32ArraySupport","buffer","isPositiveZerof","ssort2hp","isNegativeZerof","ssort2ins","ssort2sh","ssorthp","ssortins","ssortsh","ssumkbn","ssum","ssumkbn2","ssumors","ssumpw","ns","base"],"mappings":"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"}